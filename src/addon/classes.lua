return {
	LuaAISettings = {
		methods = {},
		attributes = {
			allow_destroy_when_commands_fail = {},
			allow_try_return_to_spawner = {},
			do_separation = {},
			object_name = {},
			path_resolution_modifier = {},
			valid = {},
		},
	},
	LuaAccumulatorControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			output_signal = {},
			read_charge = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaAchievementPrototype = {
		methods = {},
		attributes = {
			allowed_without_fight = {},
			alternative_armor = {},
			ammo_type = {},
			amount = {},
			armor = {},
			count = {},
			damage_dealer = {},
			damage_type = {},
			dont_build = {},
			dont_research = {},
			excluded = {},
			fluid_product = {},
			in_vehicle = {},
			included = {},
			item_product = {},
			last_hour_only = {},
			limit_equip_quality = {},
			limit_quality = {},
			limited_to_one_game = {},
			minimum_damage = {},
			minimum_distance = {},
			minimum_energy_produced = {},
			module = {},
			more_than_manually = {},
			not_to_kill = {},
			object_name = {},
			objective_condition = {},
			personally = {},
			quality = {},
			research_all = {},
			research_with = {},
			science_pack = {},
			should_survive = {},
			surface = {},
			technology = {},
			to_build = {},
			to_kill = {},
			to_use = {},
			type_not_to_kill = {},
			type_of_dealer = {},
			type_to_kill = {},
			valid = {},
			within = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaActiveTriggerPrototype = {
		methods = {},
		attributes = {
			fork_chance = {},
			jump_delay_ticks = {},
			max_forks = {},
			max_forks_per_jump = {},
			max_jumps = {},
			max_range = {},
			max_range_per_jump = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaAgriculturalTowerControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_contents = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaAirbornePollutantPrototype = {
		methods = {},
		attributes = {
			affects_evolution = {},
			chart_color = {},
			localised_name_with_amount_key = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaAmmoCategoryPrototype = {
		methods = {},
		attributes = {
			bonus_gui_order = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaArithmeticCombinatorControlBehavior = {
		methods = {
			get_signal_last_tick = {},
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			parameters = {},
			valid = {},
			signals_last_tick = {},
			entity = {},
			type = {},
		},
	},
	LuaArtilleryTurretControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_ammo = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaAssemblingMachineControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_read_contents = {},
			circuit_read_ingredients = {},
			circuit_read_recipe_finished = {},
			circuit_read_working = {},
			circuit_recipe_finished_signal = {},
			circuit_set_recipe = {},
			circuit_working_signal = {},
			include_fuel = {},
			include_in_crafting = {},
			object_name = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaAsteroidChunkPrototype = {
		methods = {},
		attributes = {
			hide_from_signal_gui = {},
			item_signal_alias = {},
			mineable_properties = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaAsteroidCollectorControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			include_hands = {},
			object_name = {},
			read_content = {},
			set_filter = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaAutoplaceControlPrototype = {
		methods = {},
		attributes = {
			can_be_disabled = {},
			category = {},
			object_name = {},
			richness = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaBootstrap = {
		methods = {
			generate_event_name = {},
			get_event_filter = {},
			get_event_handler = {},
			get_event_order = {},
			on_configuration_changed = {},
			on_event = {},
			on_init = {},
			on_load = {},
			on_nth_tick = {},
			raise_biter_base_built = {},
			raise_console_chat = {},
			raise_event = {},
			raise_market_item_purchased = {},
			raise_player_crafted_item = {},
			raise_player_fast_transferred = {},
			raise_script_built = {},
			raise_script_destroy = {},
			raise_script_revive = {},
			raise_script_set_tiles = {},
			raise_script_teleported = {},
			register_metatable = {},
			register_on_object_destroyed = {},
			set_event_filter = {},
		},
		attributes = {
			active_mods = {},
			feature_flags = {},
			level = {},
			mod_name = {},
			object_name = {},
		},
	},
	LuaBurner = {
		methods = {},
		attributes = {
			burnt_result_inventory = {},
			currently_burning = {},
			fuel_categories = {},
			heat = {},
			heat_capacity = {},
			inventory = {},
			object_name = {},
			owner = {},
			remaining_burning_fuel = {},
			valid = {},
		},
	},
	LuaBurnerPrototype = {
		methods = {},
		attributes = {
			burnt_inventory_size = {},
			effectivity = {},
			emissions_per_joule = {},
			fuel_categories = {},
			fuel_inventory_size = {},
			light_flicker = {},
			object_name = {},
			render_no_network_icon = {},
			render_no_power_icon = {},
			smoke = {},
			valid = {},
		},
	},
	LuaBurnerUsagePrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaCargoLandingPadControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_exclusive_mode_of_operation = {},
			object_name = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaChunkIterator = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaCircuitNetwork = {
		methods = {
			get_signal = {},
		},
		attributes = {
			connected_circuit_count = {},
			entity = {},
			network_id = {},
			object_name = {},
			signals = {},
			valid = {},
			wire_connector_id = {},
			wire_type = {},
		},
	},
	LuaCollisionLayerPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaCombinatorControlBehavior = {
		methods = {
			get_signal_last_tick = {},
			get_circuit_network = {},
		},
		attributes = {
			signals_last_tick = {},
			entity = {},
			type = {},
		},
	},
	LuaCommandProcessor = {
		methods = {
			add_command = {},
			remove_command = {},
		},
		attributes = {
			commands = {},
			game_commands = {},
			object_name = {},
		},
	},
	LuaCommandable = {
		methods = {
			add_member = {
				"UnitGroup",
			},
			destroy = {},
			release_from_spawner = {},
			set_autonomous = {
				"UnitGroup",
			},
			set_command = {},
			set_distraction_command = {},
			start_moving = {
				"UnitGroup",
			},
		},
		attributes = {
			command = {},
			commandable_members = {
				"UnitGroup",
			},
			distraction_command = {},
			entity = {
				"Entity",
			},
			force = {},
			has_command = {},
			is_entity = {},
			is_script_driven = {
				"UnitGroup",
			},
			is_unit_group = {},
			members = {
				"UnitGroup",
			},
			moving_state = {},
			object_name = {},
			parent_group = {},
			position = {},
			spawner = {},
			state = {
				"UnitGroup",
			},
			surface = {},
			unique_id = {},
			valid = {},
		},
	},
	LuaConstantCombinatorControlBehavior = {
		methods = {
			add_section = {},
			get_section = {},
			remove_section = {},
			get_circuit_network = {},
		},
		attributes = {
			enabled = {},
			object_name = {},
			sections = {},
			sections_count = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaContainerControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_contents = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaControl = {
		methods = {
			begin_crafting = {},
			can_insert = {},
			can_reach_entity = {},
			cancel_crafting = {},
			clear_gui_arrow = {},
			clear_items_inside = {},
			clear_selected_entity = {},
			disable_flashlight = {},
			enable_flashlight = {},
			get_craftable_count = {},
			get_inventory = {},
			get_item_count = {},
			get_main_inventory = {},
			get_max_inventory_index = {},
			get_requester_point = {},
			has_items_inside = {},
			insert = {},
			is_cursor_blueprint = {},
			is_cursor_empty = {},
			is_flashlight_enabled = {},
			is_player = {},
			mine_entity = {},
			mine_tile = {},
			open_technology_gui = {},
			remove_item = {},
			set_driving = {},
			set_gui_arrow = {},
			teleport = {},
			update_selected_entity = {},
		},
		attributes = {
			build_distance = {},
			character_additional_mining_categories = {},
			character_build_distance_bonus = {},
			character_crafting_speed_modifier = {},
			character_health_bonus = {},
			character_inventory_slots_bonus = {},
			character_item_drop_distance_bonus = {},
			character_item_pickup_distance_bonus = {},
			character_loot_pickup_distance_bonus = {},
			character_maximum_following_robot_count_bonus = {},
			character_mining_progress = {},
			character_mining_speed_modifier = {},
			character_reach_distance_bonus = {},
			character_resource_reach_distance_bonus = {},
			character_running_speed = {},
			character_running_speed_modifier = {},
			character_trash_slot_count_bonus = {},
			cheat_mode = {},
			crafting_queue = {},
			crafting_queue_progress = {},
			crafting_queue_size = {},
			cursor_ghost = {},
			cursor_record = {},
			cursor_stack = {},
			driving = {},
			drop_item_distance = {},
			following_robots = {},
			force = {},
			force_index = {},
			in_combat = {},
			item_pickup_distance = {},
			loot_pickup_distance = {},
			mining_state = {},
			opened = {},
			opened_gui_type = {},
			picking_state = {},
			position = {},
			reach_distance = {},
			repair_state = {},
			resource_reach_distance = {},
			riding_state = {},
			selected = {},
			shooting_state = {},
			surface = {},
			surface_index = {},
			vehicle = {},
			walking_state = {},
		},
	},
	LuaControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			entity = {},
			type = {},
		},
	},
	LuaCustomChartTag = {
		methods = {
			destroy = {},
		},
		attributes = {
			force = {},
			icon = {},
			last_user = {},
			object_name = {},
			position = {},
			surface = {},
			tag_number = {},
			text = {},
			valid = {},
		},
	},
	LuaCustomEventPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaCustomInputPrototype = {
		methods = {},
		attributes = {
			action = {},
			alternative_key_sequence = {},
			consuming = {},
			controller_alternative_key_sequence = {},
			controller_key_sequence = {},
			enabled = {},
			enabled_while_in_cutscene = {},
			enabled_while_spectating = {},
			include_selected_prototype = {},
			item_to_spawn = {},
			key_sequence = {},
			linked_game_control = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaCustomTable = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaDamagePrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaDeciderCombinatorControlBehavior = {
		methods = {
			add_condition = {},
			add_output = {},
			get_condition = {},
			get_output = {},
			remove_condition = {},
			remove_output = {},
			set_condition = {},
			set_output = {},
			get_signal_last_tick = {},
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			parameters = {},
			valid = {},
			signals_last_tick = {},
			entity = {},
			type = {},
		},
	},
	LuaDecorativePrototype = {
		methods = {},
		attributes = {
			autoplace_specification = {},
			collision_box = {},
			collision_mask = {},
			decal = {},
			grows_through_rail_path = {},
			minimal_separation = {},
			object_name = {},
			placed_effect = {},
			render_layer = {},
			target_count = {},
			trigger_effect = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaDisplayPanelControlBehavior = {
		methods = {
			get_message = {},
			set_message = {},
			get_circuit_network = {},
		},
		attributes = {
			messages = {},
			object_name = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaElectricEnergySourcePrototype = {
		methods = {
			get_input_flow_limit = {},
			get_output_flow_limit = {},
		},
		attributes = {
			buffer_capacity = {},
			drain = {},
			emissions_per_joule = {},
			object_name = {},
			render_no_network_icon = {},
			render_no_power_icon = {},
			usage_priority = {},
			valid = {},
		},
	},
	LuaEntity = {
		methods = {
			add_autopilot_destination = {
				"SpiderVehicle",
			},
			add_market_item = {
				"Market",
			},
			can_be_destroyed = {},
			can_shoot = {
				"Character",
			},
			can_wires_reach = {},
			cancel_deconstruction = {},
			cancel_upgrade = {},
			clear_fluid_inside = {},
			clear_market_items = {
				"Market",
			},
			clone = {},
			connect_linked_belts = {
				"LinkedBelt",
			},
			connect_rolling_stock = {
				"RollingStock",
			},
			copy_settings = {},
			create_build_effect_smoke = {},
			damage = {
				"EntityWithHealth",
			},
			deplete = {
				"ResourceEntity",
			},
			destroy = {},
			die = {},
			disconnect_linked_belts = {
				"LinkedBelt",
			},
			disconnect_rolling_stock = {
				"RollingStock",
			},
			force_finish_ascending = {
				"CargoPod",
			},
			force_finish_descending = {
				"CargoPod",
			},
			get_beacon_effect_receivers = {
				"Beacon",
			},
			get_beacons = {},
			get_beam_source = {
				"Beam",
			},
			get_beam_target = {
				"Beam",
			},
			get_burnt_result_inventory = {},
			get_child_signals = {
				"RailChainSignal",
			},
			get_circuit_network = {},
			get_connected_rail = {
				"Rail",
			},
			get_connected_rails = {
				"RailSignal",
				"RailChainSignal",
			},
			get_connected_rolling_stock = {
				"RollingStock",
			},
			get_control_behavior = {},
			get_damage_to_be_taken = {},
			get_driver = {
				"Vehicle",
			},
			get_electric_input_flow_limit = {},
			get_electric_output_flow_limit = {},
			get_filter = {},
			get_fluid = {},
			get_fluid_contents = {},
			get_fluid_count = {},
			get_fuel_inventory = {},
			get_health_ratio = {},
			get_heat_setting = {
				"HeatInterface",
			},
			get_inbound_signals = {
				"Rail",
			},
			get_infinity_container_filter = {
				"InfinityContainer",
			},
			get_infinity_pipe_filter = {
				"InfinityPipe",
			},
			get_item_insert_specification = {
				"TransportBeltConnectable",
			},
			get_line_item_position = {
				"TransportBeltConnectable",
			},
			get_logistic_point = {},
			get_logistic_sections = {},
			get_market_items = {
				"Market",
			},
			get_max_transport_line_index = {
				"TransportBeltConnectable",
			},
			get_module_inventory = {},
			get_or_create_control_behavior = {},
			get_outbound_signals = {
				"Rail",
			},
			get_output_inventory = {},
			get_parent_signals = {
				"RailSignal",
				"RailChainSignal",
			},
			get_passenger = {
				"Car",
				"SpiderVehicle",
			},
			get_priority_target = {},
			get_radius = {},
			get_rail_end = {
				"Rail",
			},
			get_rail_segment_end = {
				"Rail",
			},
			get_rail_segment_length = {
				"Rail",
			},
			get_rail_segment_overlaps = {
				"Rail",
			},
			get_rail_segment_rails = {
				"Rail",
			},
			get_rail_segment_signal = {
				"Rail",
			},
			get_rail_segment_stop = {
				"Rail",
			},
			get_recipe = {
				"CraftingMachine",
			},
			get_signal = {},
			get_signals = {},
			get_spider_legs = {
				"SpiderVehicle",
			},
			get_stopped_train = {
				"TrainStop",
			},
			get_train_stop_trains = {
				"TrainStop",
			},
			get_transport_line = {
				"TransportBeltConnectable",
			},
			get_upgrade_target = {},
			get_wire_connector = {},
			get_wire_connectors = {},
			ghost_has_flag = {
				"EntityGhost",
			},
			has_flag = {},
			insert_fluid = {},
			is_closed = {
				"Gate",
			},
			is_closing = {
				"Gate",
			},
			is_connected_to_electric_network = {},
			is_crafting = {
				"CraftingMachine",
			},
			is_opened = {
				"Gate",
			},
			is_opening = {
				"Gate",
			},
			is_rail_in_same_rail_block_as = {
				"Rail",
			},
			is_rail_in_same_rail_segment_as = {
				"Rail",
			},
			is_registered_for_construction = {},
			is_registered_for_deconstruction = {},
			is_registered_for_repair = {},
			is_registered_for_upgrade = {},
			launch_rocket = {
				"RocketSilo",
			},
			mine = {},
			order_deconstruction = {},
			order_upgrade = {},
			play_note = {
				"ProgrammableSpeaker",
			},
			release_from_spawner = {
				"Unit",
				"SpiderUnit",
			},
			remove_fluid = {},
			remove_market_item = {
				"Market",
			},
			request_to_close = {
				"Gate",
			},
			request_to_open = {
				"Gate",
			},
			revive = {
				"Ghost",
			},
			rotate = {},
			set_beam_source = {
				"Beam",
			},
			set_beam_target = {
				"Beam",
			},
			set_driver = {
				"Vehicle",
			},
			set_filter = {},
			set_fluid = {},
			set_heat_setting = {
				"HeatInterface",
			},
			set_infinity_container_filter = {
				"InfinityContainer",
			},
			set_infinity_pipe_filter = {
				"InfinityPipe",
			},
			set_passenger = {
				"Car",
				"SpiderVehicle",
			},
			set_priority_target = {},
			set_recipe = {
				"AssemblingMachine",
			},
			silent_revive = {
				"Ghost",
			},
			spawn_decorations = {},
			start_fading_out = {
				"SpeechBubble",
			},
			stop_spider = {
				"SpiderVehicle",
			},
			supports_backer_name = {},
			to_be_deconstructed = {},
			to_be_upgraded = {},
			toggle_equipment_movement_bonus = {},
			update_connections = {},
			begin_crafting = {},
			can_insert = {},
			can_reach_entity = {},
			cancel_crafting = {},
			clear_gui_arrow = {},
			clear_items_inside = {},
			clear_selected_entity = {},
			disable_flashlight = {},
			enable_flashlight = {},
			get_craftable_count = {},
			get_inventory = {},
			get_item_count = {},
			get_main_inventory = {},
			get_max_inventory_index = {},
			get_requester_point = {},
			has_items_inside = {},
			insert = {},
			is_cursor_blueprint = {},
			is_cursor_empty = {},
			is_flashlight_enabled = {},
			is_player = {},
			mine_entity = {},
			mine_tile = {},
			open_technology_gui = {},
			remove_item = {},
			set_driving = {},
			set_gui_arrow = {},
			teleport = {},
			update_selected_entity = {},
		},
		attributes = {
			absorbed_pollution = {
				"Spawner",
			},
			active = {},
			ai_settings = {
				"Unit",
				"SpiderUnit",
			},
			alert_parameters = {
				"ProgrammableSpeaker",
			},
			allow_dispatching_robots = {
				"Character",
			},
			always_on = {
				"Lamp",
			},
			amount = {
				"ResourceEntity",
			},
			armed = {
				"LandMine",
			},
			artillery_auto_targeting = {
				"ArtilleryWagon",
				"ArtilleryTurret",
			},
			associated_player = {
				"Character",
			},
			autopilot_destination = {
				"SpiderVehicle",
			},
			autopilot_destinations = {
				"SpiderVehicle",
			},
			backer_name = {},
			beacons_count = {},
			belt_neighbours = {
				"TransportBeltConnectable",
			},
			belt_shape = {
				"TransportBelt",
			},
			belt_to_ground_type = {
				"UndergroundBelt",
			},
			bonus_mining_progress = {},
			bonus_progress = {
				"CraftingMachine",
			},
			bounding_box = {},
			burner = {},
			cargo_pod = {
				"RocketSiloRocket",
			},
			chain_signal_state = {
				"RailChainSignal",
			},
			character_corpse_death_cause = {
				"CharacterCorpse",
			},
			character_corpse_player_index = {
				"CharacterCorpse",
			},
			character_corpse_tick_of_death = {
				"CharacterCorpse",
			},
			cliff_orientation = {
				"Cliff",
			},
			color = {},
			combat_robot_owner = {
				"CombatRobot",
			},
			combinator_description = {},
			commandable = {},
			connected_rail = {
				"TrainStop",
			},
			connected_rail_direction = {
				"TrainStop",
			},
			consumption_bonus = {},
			consumption_modifier = {
				"Car",
			},
			copy_color_from_train_stop = {
				"RollingStock",
			},
			corpse_expires = {
				"Corpse",
			},
			corpse_immune_to_entity_placement = {
				"Corpse",
			},
			crafting_progress = {
				"CraftingMachine",
			},
			crafting_speed = {
				"CraftingMachine",
			},
			crane_destination = {
				"AgriculturalTower",
			},
			crane_destination_3d = {
				"AgriculturalTower",
			},
			custom_status = {},
			damage_dealt = {
				"Turret",
			},
			destructible = {},
			direction = {},
			draw_data = {
				"RollingStock",
			},
			driver_is_gunner = {
				"Car",
				"SpiderVehicle",
			},
			drop_position = {},
			drop_target = {},
			effective_speed = {
				"Unit",
			},
			effectivity_modifier = {
				"Car",
			},
			effects = {},
			electric_buffer_size = {},
			electric_drain = {},
			electric_emissions_per_joule = {},
			electric_network_id = {},
			electric_network_statistics = {
				"ElectricPole",
			},
			enable_logistics_while_moving = {
				"Vehicle",
			},
			energy = {},
			energy_generated_last_tick = {
				"Generator",
			},
			entity_label = {},
			filter_slot_count = {},
			fluidbox = {},
			fluids_count = {},
			follow_offset = {
				"SpiderVehicle",
			},
			follow_target = {
				"SpiderVehicle",
			},
			friction_modifier = {
				"Car",
			},
			ghost_localised_description = {
				"Ghost",
			},
			ghost_localised_name = {
				"Ghost",
			},
			ghost_name = {
				"Ghost",
			},
			ghost_prototype = {
				"Ghost",
			},
			ghost_type = {
				"Ghost",
			},
			ghost_unit_number = {
				"EntityGhost",
			},
			gps_tag = {},
			graphics_variation = {},
			grid = {},
			health = {},
			held_stack = {
				"Inserter",
			},
			held_stack_position = {
				"Inserter",
			},
			highlight_box_blink_interval = {
				"HighlightBox",
			},
			highlight_box_type = {
				"HighlightBox",
			},
			ignore_unprioritised_targets = {
				"Turret",
			},
			infinity_container_filters = {
				"InfinityContainer",
			},
			initial_amount = {
				"ResourceEntity",
			},
			insert_plan = {
				"EntityGhost",
				"ItemRequestProxy",
			},
			inserter_filter_mode = {
				"Inserter",
			},
			inserter_stack_size_override = {
				"Inserter",
			},
			inserter_target_pickup_count = {
				"Inserter",
			},
			is_entity_with_health = {},
			is_entity_with_owner = {},
			is_headed_to_trains_front = {
				"RollingStock",
			},
			is_military_target = {},
			item_requests = {},
			kills = {
				"Turret",
			},
			last_user = {
				"EntityWithOwner",
				"DeconstructibleTileProxy",
				"TileGhost",
			},
			link_id = {
				"LinkedContainer",
			},
			linked_belt_neighbour = {
				"LinkedBelt",
			},
			linked_belt_type = {
				"LinkedBelt",
			},
			loader_container = {
				"Loader",
			},
			loader_filter_mode = {
				"Loader",
			},
			loader_type = {
				"Loader",
			},
			localised_description = {},
			localised_name = {},
			logistic_cell = {},
			logistic_network = {},
			max_health = {},
			minable = {},
			mining_drill_filter_mode = {
				"MiningDrill",
			},
			mining_progress = {},
			mining_target = {
				"MiningDrill",
			},
			mirroring = {},
			name = {},
			name_tag = {},
			neighbour_bonus = {
				"Reactor",
			},
			neighbours = {},
			object_name = {},
			operable = {},
			orientation = {},
			parameters = {
				"ProgrammableSpeaker",
			},
			pickup_position = {
				"Inserter",
			},
			pickup_target = {
				"Inserter",
			},
			player = {
				"Character",
			},
			pollution_bonus = {},
			power_production = {
				"ElectricEnergyInterface",
			},
			power_switch_state = {
				"PowerSwitch",
			},
			power_usage = {
				"ElectricEnergyInterface",
			},
			previous_recipe = {
				"Furnace",
			},
			procession_tick = {
				"CargoPod",
			},
			productivity_bonus = {},
			products_finished = {
				"CraftingMachine",
			},
			prototype = {},
			proxy_target = {
				"ItemRequestProxy",
			},
			pump_rail_target = {
				"Pump",
			},
			quality = {},
			radar_scan_progress = {
				"Radar",
			},
			rail_layer = {
				"RailSignal",
				"RailChainSignal",
			},
			recipe_locked = {
				"AssemblingMachine",
			},
			relative_turret_orientation = {},
			removal_plan = {
				"ItemRequestProxy",
			},
			remove_unfiltered_items = {
				"InfinityContainer",
			},
			render_player = {},
			render_to_forces = {},
			request_from_buffers = {},
			result_quality = {
				"CraftingMachine",
			},
			robot_order_queue = {
				"ConstructionRobot",
				"LogisticRobot",
			},
			rocket_parts = {
				"RocketSilo",
			},
			rocket_silo_status = {
				"RocketSilo",
			},
			rotatable = {},
			secondary_bounding_box = {},
			secondary_selection_box = {},
			selected_gun_index = {
				"Character",
				"Car",
				"SpiderVehicle",
			},
			selection_box = {},
			shooting_target = {
				"Turret",
			},
			signal_state = {
				"RailSignal",
				"RailChainSignal",
			},
			spawn_shift = {
				"Spawner",
			},
			spawning_cooldown = {
				"Spawner",
			},
			speed = {},
			speed_bonus = {},
			splitter_filter = {
				"Splitter",
				"LaneSplitter",
			},
			splitter_input_priority = {
				"Splitter",
				"LaneSplitter",
			},
			splitter_output_priority = {
				"Splitter",
				"LaneSplitter",
			},
			stack = {
				"ItemEntity",
			},
			status = {},
			sticked_to = {
				"Sticker",
			},
			sticker_vehicle_modifiers = {},
			stickers = {},
			storage_filter = {},
			supports_direction = {},
			tags = {},
			temperature = {},
			tick_grown = {
				"Plant",
			},
			tick_of_last_attack = {
				"Character",
			},
			tick_of_last_damage = {
				"Character",
			},
			tile_height = {},
			tile_width = {},
			time_to_live = {
				"CombatRobot",
				"HighlightBox",
				"Smoke",
				"Sticker",
			},
			time_to_next_effect = {
				"SmokeWithTrigger",
			},
			timeout = {
				"LandMine",
			},
			to_be_looted = {
				"ItemEntity",
			},
			torso_orientation = {
				"SpiderVehicle",
			},
			train = {},
			train_stop_priority = {
				"TrainStop",
			},
			trains_count = {
				"TrainStop",
			},
			trains_in_block = {
				"Rail",
			},
			trains_limit = {
				"TrainStop",
			},
			tree_color_index = {
				"Tree",
			},
			tree_color_index_max = {
				"Tree",
			},
			tree_gray_stage_index = {
				"Tree",
			},
			tree_gray_stage_index_max = {
				"Tree",
			},
			tree_stage_index = {
				"Tree",
			},
			tree_stage_index_max = {
				"Tree",
			},
			type = {},
			unit_number = {},
			units = {
				"Spawner",
			},
			use_filters = {
				"Inserter",
			},
			valid = {},
			vehicle_automatic_targeting_parameters = {
				"SpiderVehicle",
			},
			build_distance = {},
			character_additional_mining_categories = {},
			character_build_distance_bonus = {},
			character_crafting_speed_modifier = {},
			character_health_bonus = {},
			character_inventory_slots_bonus = {},
			character_item_drop_distance_bonus = {},
			character_item_pickup_distance_bonus = {},
			character_loot_pickup_distance_bonus = {},
			character_maximum_following_robot_count_bonus = {},
			character_mining_progress = {},
			character_mining_speed_modifier = {},
			character_reach_distance_bonus = {},
			character_resource_reach_distance_bonus = {},
			character_running_speed = {},
			character_running_speed_modifier = {},
			character_trash_slot_count_bonus = {},
			cheat_mode = {},
			crafting_queue = {},
			crafting_queue_progress = {},
			crafting_queue_size = {},
			cursor_ghost = {},
			cursor_record = {},
			cursor_stack = {},
			driving = {},
			drop_item_distance = {},
			following_robots = {},
			force = {},
			force_index = {},
			in_combat = {},
			item_pickup_distance = {},
			loot_pickup_distance = {},
			mining_state = {},
			opened = {},
			opened_gui_type = {},
			picking_state = {},
			position = {},
			reach_distance = {},
			repair_state = {},
			resource_reach_distance = {},
			riding_state = {},
			selected = {},
			shooting_state = {},
			surface = {},
			surface_index = {},
			vehicle = {},
			walking_state = {},
		},
	},
	LuaEntityPrototype = {
		methods = {
			get_crafting_speed = {
				"CraftingMachine",
			},
			get_inserter_extension_speed = {
				"Inserter",
			},
			get_inserter_rotation_speed = {
				"Inserter",
			},
			get_inventory_size = {},
			get_max_circuit_wire_distance = {},
			get_max_distance_of_nearby_sector_revealed = {
				"Radar",
				"CargoLandingPad",
			},
			get_max_distance_of_sector_revealed = {
				"Radar",
			},
			get_max_energy = {
				"FlyingRobot",
			},
			get_max_energy_production = {},
			get_max_energy_usage = {},
			get_max_health = {},
			get_max_wire_distance = {},
			get_researching_speed = {
				"Lab",
			},
			get_supply_area_distance = {
				"ElectricPole",
				"Beacon",
			},
			has_flag = {},
		},
		attributes = {
			absorptions_to_join_attack = {
				"SpiderUnit",
				"Unit",
			},
			active_energy_usage = {
				"RocketSilo",
				"Combinator",
			},
			additional_pastable_entities = {},
			affected_by_tiles = {
				"Unit",
			},
			air_resistance = {
				"RollingStock",
			},
			alert_icon_scale = {},
			alert_icon_shift = {},
			alert_when_attacking = {
				"Turret",
			},
			alert_when_damaged = {
				"EntityWithHealth",
			},
			allow_access_to_all_forces = {
				"Market",
			},
			allow_burner_leech = {
				"Inserter",
			},
			allow_copy_paste = {},
			allow_custom_vectors = {
				"Inserter",
			},
			allow_passengers = {
				"Vehicle",
			},
			allow_run_time_change_of_is_military_target = {
				"EntityWithOwner",
			},
			allowed_effects = {},
			allowed_module_categories = {},
			always_on = {
				"Lamp",
			},
			ammo_category = {
				"LandMine",
			},
			animation_speed_coefficient = {
				"BeltConnectable",
			},
			attack_parameters = {},
			attack_result = {},
			auto_setup_collision_box = {
				"Corpse",
			},
			automated_ammo_count = {
				"ArtilleryTurret",
				"AmmoTurret",
			},
			automatic_weapon_cycling = {
				"SpiderVehicle",
			},
			autoplace_specification = {},
			beacon_counter = {
				"Beacon",
			},
			belt_distance = {
				"Loader",
			},
			belt_length = {
				"Loader",
			},
			belt_speed = {
				"TransportBeltConnectable",
			},
			boiler_mode = {
				"Boiler",
			},
			braking_force = {
				"Vehicle",
			},
			build_base_evolution_requirement = {},
			build_distance = {
				"Character",
			},
			building_grid_bit_shift = {},
			bulk = {
				"Inserter",
			},
			burner_prototype = {},
			burns_fluid = {
				"Generator",
			},
			call_for_help_radius = {
				"Spawner",
			},
			can_open_gates = {
				"Unit",
			},
			chain_shooting_cooldown_modifier = {
				"SpiderVehicle",
			},
			character_corpse = {
				"Character",
			},
			chunk_exploration_radius = {
				"Vehicle",
			},
			cliff_explosive_prototype = {
				"Cliff",
			},
			collision_box = {},
			collision_mask = {},
			collision_mask_collides_with_self = {},
			collision_mask_collides_with_tiles_only = {},
			collision_mask_considers_tile_transitions = {},
			color = {},
			connection_distance = {
				"RollingStock",
			},
			construction_radius = {
				"Roboport",
			},
			consumption = {
				"Car",
			},
			container_distance = {
				"Loader",
			},
			corpses = {
				"EntityWithHealth",
			},
			count_as_rock_for_filtered_deconstruction = {
				"SimpleEntity",
			},
			crafting_categories = {
				"CraftingMachine",
				"Character",
			},
			create_ghost_on_death = {},
			created_effect = {},
			created_smoke = {},
			damage_hit_tint = {
				"Character",
			},
			darkness_for_all_lamps_off = {
				"Lamp",
			},
			darkness_for_all_lamps_on = {
				"Lamp",
			},
			destroy_non_fuel_fluid = {
				"Generator",
			},
			distraction_cooldown = {
				"SpiderUnit",
				"Unit",
			},
			distribution_effectivity = {
				"Beacon",
			},
			distribution_effectivity_bonus_per_quality_level = {
				"Beacon",
			},
			door_opening_speed = {
				"RocketSilo",
			},
			draw_cargo = {
				"RobotWithLogisticsInterface",
			},
			drawing_box_vertical_extension = {},
			drop_item_distance = {
				"Character",
			},
			dying_speed = {
				"Corpse",
			},
			effect_receiver = {
				"CraftingMachine",
				"Lab",
				"MiningDrill",
			},
			effectivity = {
				"Car",
				"Generator",
			},
			electric_energy_source_prototype = {},
			emissions_per_second = {},
			enemy_map_color = {},
			energy_per_hit_point = {
				"Vehicle",
			},
			energy_per_move = {
				"FlyingRobot",
			},
			energy_per_tick = {
				"FlyingRobot",
			},
			energy_usage = {},
			engine_starting_speed = {
				"RocketSiloRocket",
			},
			enter_vehicle_distance = {
				"Character",
			},
			explosion_beam = {
				"Explosion",
			},
			explosion_rotate = {
				"Explosion",
			},
			fast_replaceable_group = {},
			filter_count = {
				"Inserter",
				"Loader",
				"LogisticContainer",
				"MiningDrill",
			},
			final_attack_result = {
				"Projectile",
			},
			fixed_recipe = {
				"AssemblingMachine",
			},
			flags = {},
			fluid_capacity = {},
			fluid_energy_source_prototype = {},
			fluid_usage_per_tick = {
				"Generator",
			},
			fluidbox_prototypes = {},
			flying_acceleration = {
				"RocketSiloRocket",
			},
			flying_speed = {
				"RocketSiloRocket",
			},
			friction_force = {
				"Vehicle",
			},
			friendly_map_color = {},
			grid_prototype = {},
			growth_grid_tile_size = {
				"AgriculturalTower",
			},
			growth_ticks = {
				"Plant",
			},
			guns = {},
			harvest_emissions = {
				"Plant",
			},
			has_belt_immunity = {
				"Unit",
				"Car",
				"Character",
			},
			healing_per_tick = {},
			heat_buffer_prototype = {},
			heat_energy_source_prototype = {},
			heating_energy = {},
			height = {
				"SpiderUnit",
				"SpiderVehicle",
			},
			indexed_guns = {
				"Car",
				"SpiderVehicle",
				"ArtilleryTurret",
				"ArtilleryWagon",
			},
			infinite_depletion_resource_amount = {
				"ResourceEntity",
			},
			infinite_resource = {
				"ResourceEntity",
			},
			ingredient_count = {
				"CraftingMachine",
			},
			inserter_chases_belt_items = {
				"Inserter",
			},
			inserter_drop_position = {
				"Inserter",
			},
			inserter_pickup_position = {
				"Inserter",
			},
			inserter_stack_size_bonus = {
				"Inserter",
			},
			instruments = {
				"ProgrammableSpeaker",
			},
			inventory_type = {
				"ContainerEntity",
				"LinkedContainer",
			},
			is_building = {},
			is_entity_with_owner = {},
			is_military_target = {
				"EntityWithOwner",
			},
			item_pickup_distance = {
				"Character",
			},
			items_to_place_this = {},
			joint_distance = {
				"RollingStock",
			},
			lab_inputs = {
				"Lab",
			},
			lamp_energy_usage = {
				"RocketSilo",
			},
			launch_wait_time = {
				"RocketSilo",
			},
			light_blinking_speed = {
				"RocketSilo",
			},
			logistic_mode = {
				"LogisticContainer",
			},
			logistic_parameters = {
				"Roboport",
			},
			logistic_radius = {
				"Roboport",
			},
			loot = {
				"EntityWithHealth",
			},
			loot_pickup_distance = {
				"Character",
			},
			manual_range_modifier = {
				"ArtilleryWagon",
				"ArtilleryTurret",
			},
			map_color = {},
			map_generator_bounding_box = {},
			max_count_of_owned_units = {
				"Spawner",
			},
			max_darkness_to_spawn = {
				"Spawner",
			},
			max_friends_around_to_spawn = {
				"Spawner",
			},
			max_payload_size = {
				"RobotWithLogisticsInterface",
			},
			max_polyphony = {
				"ProgrammableSpeaker",
			},
			max_power_output = {
				"BurnerGenerator",
				"Generator",
			},
			max_pursue_distance = {
				"SpiderUnit",
				"Unit",
			},
			max_speed = {
				"Projectile",
				"FlyingRobot",
			},
			max_to_charge = {
				"FlyingRobot",
			},
			max_underground_distance = {
				"UndergroundBelt",
				"PipeToGround",
			},
			maximum_corner_sliding_distance = {
				"Character",
			},
			maximum_temperature = {
				"Generator",
			},
			min_darkness_to_spawn = {
				"Spawner",
			},
			min_pursue_time = {
				"SpiderUnit",
				"Unit",
			},
			min_to_charge = {
				"FlyingRobot",
			},
			mineable_properties = {},
			minimum_resource_amount = {
				"ResourceEntity",
			},
			mining_drill_radius = {
				"MiningDrill",
			},
			mining_speed = {
				"MiningDrill",
				"Character",
			},
			module_inventory_size = {},
			move_while_shooting = {
				"Unit",
			},
			neighbour_bonus = {
				"Reactor",
			},
			next_upgrade = {},
			normal_resource_amount = {
				"ResourceEntity",
			},
			object_name = {},
			per_lane_filters = {
				"Loader",
			},
			profile = {
				"Beacon",
			},
			protected_from_tile_building = {},
			pumping_speed = {
				"OffshorePump",
				"Pump",
			},
			radar_range = {
				"SpiderUnit",
				"Unit",
			},
			radius = {},
			radius_visualisation_specification = {},
			reach_distance = {
				"Character",
			},
			reach_resource_distance = {
				"Character",
			},
			related_underground_belt = {
				"TransportBelt",
			},
			remains_when_mined = {},
			remove_decoratives = {},
			repair_speed_modifier = {
				"EntityWithHealth",
			},
			resistances = {
				"EntityWithHealth",
			},
			resource_categories = {
				"MiningDrill",
				"Character",
			},
			resource_category = {
				"ResourceEntity",
			},
			resource_drain_rate_percent = {
				"MiningDrill",
			},
			respawn_time = {
				"Character",
			},
			result_units = {
				"Spawner",
			},
			rising_speed = {
				"RocketSiloRocket",
			},
			rocket_entity_prototype = {
				"RocketSilo",
			},
			rocket_parts_required = {
				"RocketSilo",
			},
			rocket_rising_delay = {
				"RocketSilo",
			},
			rotation_speed = {
				"Car",
			},
			running_speed = {
				"Character",
			},
			scale_fluid_usage = {
				"Generator",
			},
			secondary_collision_box = {},
			selectable_in_game = {},
			selection_box = {},
			selection_priority = {},
			shooting_cursor_size = {},
			spawn_cooldown = {
				"Spawner",
			},
			spawn_decoration = {
				"Spawner",
				"Turret",
			},
			spawn_decorations_on_expansion = {
				"Spawner",
				"Turret",
			},
			spawning_radius = {
				"Spawner",
			},
			spawning_spacing = {
				"Spawner",
			},
			spawning_time_modifier = {
				"SpiderUnit",
				"Unit",
			},
			speed = {
				"FlyingRobot",
				"RollingStock",
				"Unit",
			},
			speed_multiplier_when_out_of_energy = {
				"FlyingRobot",
			},
			sticker_box = {},
			supports_direction = {},
			surface_conditions = {},
			tank_driving = {
				"Car",
			},
			target_temperature = {
				"Boiler",
			},
			terrain_friction_modifier = {
				"Vehicle",
			},
			ticks_to_keep_aiming_direction = {
				"Character",
			},
			ticks_to_keep_gun = {
				"Character",
			},
			ticks_to_stay_in_combat = {
				"Character",
			},
			tile_height = {},
			tile_width = {},
			time_to_live = {},
			timeout = {
				"LandMine",
			},
			torso_bob_speed = {
				"SpiderUnit",
				"SpiderVehicle",
			},
			torso_rotation_speed = {
				"SpiderUnit",
				"SpiderVehicle",
			},
			tree_color_count = {
				"Tree",
			},
			trigger_collision_mask = {
				"LandMine",
			},
			trigger_target_mask = {},
			turret_range = {
				"Turret",
			},
			turret_rotation_speed = {
				"Car",
			},
			use_exact_mode = {
				"LogisticContainer",
			},
			valid = {},
			vector_to_place_result = {
				"MiningDrill",
				"CraftingMachine",
			},
			vertical_selection_shift = {
				"RollingStock",
			},
			vision_distance = {
				"SpiderUnit",
				"Unit",
			},
			void_energy_source_prototype = {},
			weight = {
				"Vehicle",
			},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaEquipment = {
		methods = {},
		attributes = {
			burner = {},
			energy = {},
			generator_power = {},
			ghost_name = {
				"Ghost",
			},
			ghost_prototype = {
				"Ghost",
			},
			ghost_type = {
				"Ghost",
			},
			inventory_bonus = {},
			max_energy = {},
			max_shield = {},
			max_solar_power = {},
			movement_bonus = {},
			name = {},
			object_name = {},
			position = {},
			prototype = {},
			quality = {},
			shape = {},
			shield = {},
			to_be_removed = {},
			type = {},
			valid = {},
		},
	},
	LuaEquipmentCategoryPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaEquipmentGrid = {
		methods = {
			can_move = {},
			cancel_removal = {},
			clear = {},
			count = {},
			find = {},
			get = {},
			get_contents = {},
			get_generator_energy = {},
			move = {},
			order_removal = {},
			put = {},
			revive = {},
			take = {},
			take_all = {},
		},
		attributes = {
			available_in_batteries = {},
			battery_capacity = {},
			entity_owner = {},
			equipment = {},
			height = {},
			inhibit_movement_bonus = {},
			inventory_bonus = {},
			max_shield = {},
			max_solar_energy = {},
			movement_bonus = {},
			object_name = {},
			player_owner = {},
			prototype = {},
			shield = {},
			unique_id = {},
			valid = {},
			width = {},
		},
	},
	LuaEquipmentGridPrototype = {
		methods = {},
		attributes = {
			equipment_categories = {},
			height = {},
			locked = {},
			object_name = {},
			valid = {},
			width = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaEquipmentPrototype = {
		methods = {
			get_energy_consumption = {},
			get_inventory_bonus = {
				"InventoryBonusEquipment",
			},
			get_movement_bonus = {
				"MovementBonusEquipment",
			},
			get_shield = {},
		},
		attributes = {
			attack_parameters = {
				"ActiveDefenseEquipment",
			},
			automatic = {},
			background_color = {},
			burner_prototype = {},
			electric_energy_source_prototype = {},
			energy_per_shield = {},
			energy_production = {},
			energy_source = {},
			equipment_categories = {},
			logistic_parameters = {
				"RoboportEquipment",
			},
			object_name = {},
			shape = {},
			take_result = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaFlowStatistics = {
		methods = {
			clear = {},
			get_flow_count = {},
			get_input_count = {},
			get_output_count = {},
			get_storage_count = {},
			on_flow = {},
			set_input_count = {},
			set_output_count = {},
			set_storage_count = {},
		},
		attributes = {
			force = {},
			input_counts = {},
			object_name = {},
			output_counts = {},
			storage_counts = {},
			valid = {},
		},
	},
	LuaFluidBox = {
		methods = {
			add_linked_connection = {},
			flush = {},
			get_capacity = {},
			get_connections = {},
			get_filter = {},
			get_fluid_segment_contents = {},
			get_fluid_segment_id = {},
			get_linked_connection = {},
			get_linked_connections = {},
			get_locked_fluid = {},
			get_pipe_connections = {},
			get_prototype = {},
			remove_linked_connection = {},
			set_filter = {},
		},
		attributes = {
			object_name = {},
			owner = {},
			valid = {},
		},
	},
	LuaFluidBoxPrototype = {
		methods = {},
		attributes = {
			entity = {},
			filter = {},
			index = {},
			maximum_temperature = {},
			minimum_temperature = {},
			object_name = {},
			pipe_connections = {},
			production_type = {},
			render_layer = {},
			secondary_draw_orders = {},
			valid = {},
			volume = {},
		},
	},
	LuaFluidEnergySourcePrototype = {
		methods = {},
		attributes = {
			burns_fluid = {},
			destroy_non_fuel_fluid = {},
			effectivity = {},
			emissions_per_joule = {},
			fluid_box = {},
			fluid_usage_per_tick = {},
			maximum_temperature = {},
			object_name = {},
			render_no_network_icon = {},
			render_no_power_icon = {},
			scale_fluid_usage = {},
			smoke = {},
			valid = {},
		},
	},
	LuaFluidPrototype = {
		methods = {},
		attributes = {
			base_color = {},
			default_temperature = {},
			emissions_multiplier = {},
			flow_color = {},
			fuel_value = {},
			gas_temperature = {},
			heat_capacity = {},
			max_temperature = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaFontPrototype = {
		methods = {},
		attributes = {
			border = {},
			border_color = {},
			filtered = {},
			from = {},
			name = {},
			object_name = {},
			size = {},
			spacing = {},
			valid = {},
		},
	},
	LuaForce = {
		methods = {
			add_chart_tag = {},
			add_research = {},
			cancel_charting = {},
			cancel_current_research = {},
			chart = {},
			chart_all = {},
			clear_chart = {},
			copy_chart = {},
			copy_from = {},
			create_space_platform = {},
			disable_all_prototypes = {},
			disable_research = {},
			enable_all_prototypes = {},
			enable_all_recipes = {},
			enable_all_technologies = {},
			enable_research = {},
			find_chart_tags = {},
			find_logistic_network_by_position = {},
			get_ammo_damage_modifier = {},
			get_cease_fire = {},
			get_entity_build_count_statistics = {},
			get_entity_count = {},
			get_evolution_factor = {},
			get_evolution_factor_by_killing_spawners = {},
			get_evolution_factor_by_pollution = {},
			get_evolution_factor_by_time = {},
			get_fluid_production_statistics = {},
			get_friend = {},
			get_gun_speed_modifier = {},
			get_hand_crafting_disabled_for_recipe = {},
			get_item_launched = {},
			get_item_production_statistics = {},
			get_kill_count_statistics = {},
			get_linked_inventory = {},
			get_spawn_position = {},
			get_surface_hidden = {},
			get_turret_attack_modifier = {},
			is_chunk_charted = {},
			is_chunk_requested_for_charting = {},
			is_chunk_visible = {},
			is_enemy = {},
			is_friend = {},
			is_pathfinder_busy = {},
			is_quality_unlocked = {},
			is_space_location_unlocked = {},
			is_space_platforms_unlocked = {},
			kill_all_units = {},
			lock_quality = {},
			lock_space_location = {},
			lock_space_platforms = {},
			play_sound = {},
			print = {},
			rechart = {},
			research_all_technologies = {},
			reset = {},
			reset_evolution = {},
			reset_recipes = {},
			reset_technologies = {},
			reset_technology_effects = {},
			set_ammo_damage_modifier = {},
			set_cease_fire = {},
			set_evolution_factor = {},
			set_evolution_factor_by_killing_spawners = {},
			set_evolution_factor_by_pollution = {},
			set_evolution_factor_by_time = {},
			set_friend = {},
			set_gun_speed_modifier = {},
			set_hand_crafting_disabled_for_recipe = {},
			set_item_launched = {},
			set_spawn_position = {},
			set_surface_hidden = {},
			set_turret_attack_modifier = {},
			unchart_chunk = {},
			unlock_quality = {},
			unlock_space_location = {},
			unlock_space_platforms = {},
		},
		attributes = {
			ai_controllable = {},
			artillery_range_modifier = {},
			beacon_distribution_modifier = {},
			belt_stack_size_bonus = {},
			bulk_inserter_capacity_bonus = {},
			character_build_distance_bonus = {},
			character_health_bonus = {},
			character_inventory_slots_bonus = {},
			character_item_drop_distance_bonus = {},
			character_item_pickup_distance_bonus = {},
			character_logistic_requests = {},
			character_loot_pickup_distance_bonus = {},
			character_reach_distance_bonus = {},
			character_resource_reach_distance_bonus = {},
			character_running_speed_modifier = {},
			character_trash_slot_count = {},
			circuit_network_enabled = {},
			cliff_deconstruction_enabled = {},
			color = {},
			connected_players = {},
			create_ghost_on_entity_death = {},
			current_research = {},
			custom_color = {},
			deconstruction_time_to_live = {},
			following_robots_lifetime_modifier = {},
			friendly_fire = {},
			index = {},
			inserter_stack_size_bonus = {},
			items_launched = {},
			laboratory_productivity_bonus = {},
			laboratory_speed_modifier = {},
			logistic_networks = {},
			manual_crafting_speed_modifier = {},
			manual_mining_speed_modifier = {},
			max_failed_attempts_per_tick_per_construction_queue = {},
			max_successful_attempts_per_tick_per_construction_queue = {},
			maximum_following_robot_count = {},
			mining_drill_productivity_bonus = {},
			mining_with_fluid = {},
			name = {},
			object_name = {},
			platforms = {},
			players = {},
			previous_research = {},
			rail_planner_allow_elevated_rails = {},
			rail_support_on_deep_oil_ocean = {},
			recipes = {},
			research_enabled = {},
			research_progress = {},
			research_queue = {},
			rockets_launched = {},
			share_chart = {},
			technologies = {},
			train_braking_force_bonus = {},
			valid = {},
			vehicle_logistics = {},
			worker_robots_battery_modifier = {},
			worker_robots_speed_modifier = {},
			worker_robots_storage_bonus = {},
		},
	},
	LuaFuelCategoryPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaGameScript = {
		methods = {
			auto_save = {},
			ban_player = {},
			check_consistency = {},
			create_force = {},
			create_inventory = {},
			create_profiler = {},
			create_random_generator = {},
			create_surface = {},
			delete_surface = {},
			disable_replay = {},
			force_crc = {},
			get_entity_by_tag = {},
			get_entity_by_unit_number = {},
			get_map_exchange_string = {},
			get_player = {},
			get_pollution_statistics = {},
			get_script_inventories = {},
			get_surface = {},
			get_vehicles = {},
			is_demo = {},
			is_multiplayer = {},
			kick_player = {},
			merge_forces = {},
			mute_player = {},
			play_sound = {},
			print = {},
			purge_player = {},
			regenerate_entity = {},
			reload_mods = {},
			reload_script = {},
			remove_offline_players = {},
			reset_game_state = {},
			reset_time_played = {},
			save_atlas = {},
			server_save = {},
			set_game_state = {},
			set_lose_ending_info = {},
			set_wait_for_screenshots_to_finish = {},
			set_win_ending_info = {},
			show_message_dialog = {},
			take_screenshot = {},
			take_technology_screenshot = {},
			unban_player = {},
			unmute_player = {},
		},
		attributes = {
			allow_tip_activation = {},
			autosave_enabled = {},
			backer_names = {},
			blueprints = {},
			connected_players = {},
			console_command_used = {},
			default_map_gen_settings = {},
			difficulty = {},
			difficulty_settings = {},
			draw_resource_selection = {},
			enemy_has_vision_on_land_mines = {},
			finished = {},
			finished_but_continuing = {},
			forces = {},
			map_settings = {},
			object_name = {},
			permissions = {},
			planets = {},
			player = {},
			players = {},
			simulation = {},
			speed = {},
			surfaces = {},
			technology_notifications_enabled = {},
			tick = {},
			tick_paused = {},
			ticks_played = {},
			ticks_to_run = {},
			train_manager = {},
		},
	},
	LuaGenericOnOffControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaGroup = {
		methods = {},
		attributes = {
			group = {
				"ItemSubGroup",
			},
			localised_name = {},
			name = {},
			object_name = {},
			order = {},
			order_in_recipe = {
				"ItemGroup",
			},
			subgroups = {
				"ItemGroup",
			},
			type = {},
			valid = {},
		},
	},
	LuaGui = {
		methods = {},
		attributes = {
			center = {},
			children = {},
			goal = {},
			left = {},
			object_name = {},
			player = {},
			relative = {},
			screen = {},
			top = {},
			valid = {},
		},
	},
	LuaGuiElement = {
		methods = {
			add = {},
			add_item = {
				"drop-down",
				"list-box",
			},
			add_tab = {
				"tabbed-pane",
			},
			bring_to_front = {},
			clear = {},
			clear_items = {
				"drop-down",
				"list-box",
			},
			close_dropdown = {},
			destroy = {},
			focus = {},
			force_auto_center = {
				"frame",
			},
			get_index_in_parent = {},
			get_item = {
				"drop-down",
				"list-box",
			},
			get_mod = {},
			get_slider_discrete_values = {},
			get_slider_maximum = {},
			get_slider_minimum = {},
			get_slider_value_step = {},
			remove_item = {
				"drop-down",
				"list-box",
			},
			remove_tab = {
				"tabbed-pane",
			},
			scroll_to_bottom = {
				"scroll-pane",
				"text-box",
			},
			scroll_to_element = {
				"scroll-pane",
			},
			scroll_to_item = {
				"list-box",
			},
			scroll_to_left = {
				"scroll-pane",
				"text-box",
			},
			scroll_to_right = {
				"scroll-pane",
				"text-box",
			},
			scroll_to_top = {
				"scroll-pane",
				"text-box",
			},
			select = {
				"textfield",
				"text-box",
			},
			select_all = {
				"textfield",
				"text-box",
			},
			set_item = {
				"drop-down",
				"list-box",
			},
			set_slider_discrete_values = {},
			set_slider_minimum_maximum = {},
			set_slider_value_step = {},
			swap_children = {},
		},
		attributes = {
			allow_decimal = {
				"textfield",
			},
			allow_negative = {
				"textfield",
			},
			allow_none_state = {
				"switch",
			},
			anchor = {},
			auto_center = {
				"frame",
			},
			auto_toggle = {
				"button",
				"sprite-button",
			},
			badge_text = {
				"tab",
			},
			caption = {},
			children = {},
			children_names = {},
			clicked_sprite = {
				"sprite-button",
			},
			column_count = {
				"table",
			},
			direction = {
				"frame",
				"flow",
				"line",
			},
			drag_target = {
				"flow",
				"frame",
				"label",
				"table",
				"empty-widget",
			},
			draw_horizontal_line_after_headers = {
				"table",
			},
			draw_horizontal_lines = {
				"table",
			},
			draw_vertical_lines = {
				"table",
			},
			elem_filters = {
				"choose-elem-button",
			},
			elem_tooltip = {},
			elem_type = {
				"choose-elem-button",
			},
			elem_value = {
				"choose-elem-button",
			},
			enabled = {},
			entity = {
				"entity-preview",
				"camera",
				"minimap",
			},
			force = {
				"minimap",
			},
			game_controller_interaction = {},
			gui = {},
			horizontal_scroll_policy = {
				"scroll-pane",
			},
			hovered_sprite = {
				"sprite-button",
			},
			ignored_by_interaction = {},
			index = {},
			is_password = {
				"textfield",
			},
			items = {
				"drop-down",
				"list-box",
			},
			left_label_caption = {
				"switch",
			},
			left_label_tooltip = {
				"switch",
			},
			location = {},
			locked = {
				"choose-elem-button",
			},
			lose_focus_on_confirm = {
				"textfield",
			},
			minimap_player_index = {
				"minimap",
			},
			mouse_button_filter = {
				"button",
				"sprite-button",
			},
			name = {},
			number = {
				"sprite-button",
			},
			numeric = {
				"textfield",
			},
			object_name = {},
			parent = {},
			player_index = {},
			position = {
				"camera",
				"minimap",
			},
			raise_hover_events = {},
			read_only = {
				"text-box",
			},
			resize_to_sprite = {
				"sprite",
			},
			right_label_caption = {
				"switch",
			},
			right_label_tooltip = {
				"switch",
			},
			selectable = {
				"text-box",
			},
			selected_index = {
				"drop-down",
				"list-box",
			},
			selected_tab_index = {
				"tabbed-pane",
			},
			show_percent_for_small_numbers = {
				"sprite-button",
			},
			slider_value = {
				"slider",
			},
			sprite = {
				"sprite-button",
				"sprite",
			},
			state = {
				"checkbox",
				"radiobutton",
			},
			style = {},
			surface_index = {
				"camera",
				"minimap",
			},
			switch_state = {
				"switch",
			},
			tabs = {
				"tabbed-pane",
			},
			tags = {},
			text = {
				"textfield",
				"text-box",
			},
			toggled = {
				"button",
				"sprite-button",
			},
			tooltip = {},
			type = {},
			valid = {},
			value = {
				"progressbar",
			},
			vertical_centering = {
				"table",
			},
			vertical_scroll_policy = {
				"scroll-pane",
			},
			visible = {},
			word_wrap = {
				"text-box",
			},
			zoom = {
				"camera",
				"minimap",
			},
		},
	},
	LuaHeatBufferPrototype = {
		methods = {},
		attributes = {
			connections = {},
			default_temperature = {},
			max_temperature = {},
			max_transfer = {},
			min_temperature_gradient = {},
			min_working_temperature = {},
			minimum_glow_temperature = {},
			object_name = {},
			specific_heat = {},
			valid = {},
		},
	},
	LuaHeatEnergySourcePrototype = {
		methods = {},
		attributes = {
			connections = {},
			default_temperature = {},
			emissions_per_joule = {},
			heat_buffer_prototype = {},
			max_temperature = {},
			max_transfer = {},
			min_temperature_gradient = {},
			min_working_temperature = {},
			minimum_glow_temperature = {},
			object_name = {},
			render_no_network_icon = {},
			render_no_power_icon = {},
			specific_heat = {},
			valid = {},
		},
	},
	LuaHelpers = {
		methods = {
			check_prototype_translations = {},
			create_profiler = {},
			decode_string = {},
			direction_to_string = {},
			encode_string = {},
			evaluate_expression = {},
			is_valid_sound_path = {},
			is_valid_sprite_path = {},
			json_to_table = {},
			parse_map_exchange_string = {},
			remove_path = {},
			table_to_json = {},
			write_file = {},
		},
		attributes = {
			object_name = {},
		},
	},
	LuaInserterControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_hand_read_mode = {},
			circuit_read_hand_contents = {},
			circuit_set_filters = {},
			circuit_set_stack_size = {},
			circuit_stack_control_signal = {},
			object_name = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaInventory = {
		methods = {
			can_insert = {},
			can_set_filter = {},
			clear = {},
			count_empty_stacks = {},
			destroy = {},
			find_empty_stack = {},
			find_item_stack = {},
			get_bar = {},
			get_contents = {},
			get_filter = {},
			get_insertable_count = {},
			get_item_count = {},
			insert = {},
			is_empty = {},
			is_filtered = {},
			is_full = {},
			remove = {},
			resize = {},
			set_bar = {},
			set_filter = {},
			sort_and_merge = {},
			supports_bar = {},
			supports_filters = {},
		},
		attributes = {
			entity_owner = {},
			equipment_owner = {},
			index = {},
			mod_owner = {},
			object_name = {},
			player_owner = {},
			valid = {},
		},
	},
	LuaItem = {
		methods = {
			build_blueprint = {
				"BlueprintItem",
			},
			cancel_deconstruct_area = {
				"DeconstructionItem",
			},
			clear_blueprint = {
				"BlueprintItem",
			},
			clear_deconstruction_item = {
				"DeconstructionItem",
			},
			clear_upgrade_item = {
				"UpgradeItem",
			},
			create_blueprint = {
				"BlueprintItem",
			},
			deconstruct_area = {
				"DeconstructionItem",
			},
			get_blueprint_entities = {
				"BlueprintItem",
			},
			get_blueprint_entity_count = {
				"BlueprintItem",
			},
			get_blueprint_entity_tag = {
				"BlueprintItem",
			},
			get_blueprint_entity_tags = {
				"BlueprintItem",
			},
			get_blueprint_tiles = {
				"BlueprintItem",
			},
			get_entity_filter = {
				"DeconstructionItem",
			},
			get_inventory = {},
			get_mapper = {
				"UpgradeItem",
			},
			get_tag = {
				"ItemWithTags",
			},
			get_tile_filter = {
				"DeconstructionItem",
			},
			is_blueprint_setup = {
				"BlueprintItem",
			},
			remove_tag = {
				"ItemWithTags",
			},
			set_blueprint_entities = {
				"BlueprintItem",
			},
			set_blueprint_entity_tag = {
				"BlueprintItem",
			},
			set_blueprint_entity_tags = {
				"BlueprintItem",
			},
			set_blueprint_tiles = {
				"BlueprintItem",
			},
			set_entity_filter = {
				"DeconstructionItem",
			},
			set_mapper = {
				"UpgradeItem",
			},
			set_tag = {
				"ItemWithTags",
			},
			set_tile_filter = {
				"DeconstructionItem",
			},
		},
		attributes = {
			item_stack = {},
			name = {},
			object_name = {},
			prototype = {},
			quality = {},
			type = {},
			valid = {},
			active_index = {
				"BlueprintBookItem",
			},
			allow_manual_label_change = {
				"ItemWithLabel",
			},
			ammo = {
				"AmmoItem",
			},
			blueprint_absolute_snapping = {
				"BlueprintItem",
			},
			blueprint_position_relative_to_grid = {
				"BlueprintItem",
			},
			blueprint_snap_to_grid = {
				"BlueprintItem",
			},
			cost_to_build = {
				"BlueprintItem",
			},
			custom_description = {
				"ItemWithTags",
			},
			default_icons = {
				"BlueprintItem",
			},
			durability = {
				"Tool",
			},
			entity_color = {
				"ItemWithEntityData",
			},
			entity_filter_count = {
				"DeconstructionItem",
			},
			entity_filter_mode = {
				"DeconstructionItem",
			},
			entity_filters = {
				"DeconstructionItem",
			},
			entity_label = {
				"ItemWithEntityData",
			},
			grid = {},
			is_ammo = {},
			is_armor = {},
			is_blueprint = {},
			is_blueprint_book = {},
			is_deconstruction_item = {},
			is_item_with_entity_data = {},
			is_item_with_inventory = {},
			is_item_with_label = {},
			is_item_with_tags = {},
			is_repair_tool = {},
			is_selection_tool = {},
			is_tool = {},
			is_upgrade_item = {},
			item_number = {},
			label = {
				"ItemWithLabel",
			},
			label_color = {
				"ItemWithLabel",
			},
			mapper_count = {
				"UpgradeItem",
			},
			owner_location = {},
			preview_icons = {},
			tags = {
				"ItemWithTags",
			},
			tile_filter_count = {
				"DeconstructionItem",
			},
			tile_filter_mode = {
				"DeconstructionItem",
			},
			tile_filters = {
				"DeconstructionItem",
			},
			tile_selection_mode = {
				"DeconstructionItem",
			},
			trees_and_rocks_only = {
				"DeconstructionItem",
			},
		},
	},
	LuaItemCommon = {
		methods = {
			build_blueprint = {
				"BlueprintItem",
			},
			cancel_deconstruct_area = {
				"DeconstructionItem",
			},
			clear_blueprint = {
				"BlueprintItem",
			},
			clear_deconstruction_item = {
				"DeconstructionItem",
			},
			clear_upgrade_item = {
				"UpgradeItem",
			},
			create_blueprint = {
				"BlueprintItem",
			},
			deconstruct_area = {
				"DeconstructionItem",
			},
			get_blueprint_entities = {
				"BlueprintItem",
			},
			get_blueprint_entity_count = {
				"BlueprintItem",
			},
			get_blueprint_entity_tag = {
				"BlueprintItem",
			},
			get_blueprint_entity_tags = {
				"BlueprintItem",
			},
			get_blueprint_tiles = {
				"BlueprintItem",
			},
			get_entity_filter = {
				"DeconstructionItem",
			},
			get_inventory = {},
			get_mapper = {
				"UpgradeItem",
			},
			get_tag = {
				"ItemWithTags",
			},
			get_tile_filter = {
				"DeconstructionItem",
			},
			is_blueprint_setup = {
				"BlueprintItem",
			},
			remove_tag = {
				"ItemWithTags",
			},
			set_blueprint_entities = {
				"BlueprintItem",
			},
			set_blueprint_entity_tag = {
				"BlueprintItem",
			},
			set_blueprint_entity_tags = {
				"BlueprintItem",
			},
			set_blueprint_tiles = {
				"BlueprintItem",
			},
			set_entity_filter = {
				"DeconstructionItem",
			},
			set_mapper = {
				"UpgradeItem",
			},
			set_tag = {
				"ItemWithTags",
			},
			set_tile_filter = {
				"DeconstructionItem",
			},
		},
		attributes = {
			active_index = {
				"BlueprintBookItem",
			},
			allow_manual_label_change = {
				"ItemWithLabel",
			},
			ammo = {
				"AmmoItem",
			},
			blueprint_absolute_snapping = {
				"BlueprintItem",
			},
			blueprint_position_relative_to_grid = {
				"BlueprintItem",
			},
			blueprint_snap_to_grid = {
				"BlueprintItem",
			},
			cost_to_build = {
				"BlueprintItem",
			},
			custom_description = {
				"ItemWithTags",
			},
			default_icons = {
				"BlueprintItem",
			},
			durability = {
				"Tool",
			},
			entity_color = {
				"ItemWithEntityData",
			},
			entity_filter_count = {
				"DeconstructionItem",
			},
			entity_filter_mode = {
				"DeconstructionItem",
			},
			entity_filters = {
				"DeconstructionItem",
			},
			entity_label = {
				"ItemWithEntityData",
			},
			grid = {},
			is_ammo = {},
			is_armor = {},
			is_blueprint = {},
			is_blueprint_book = {},
			is_deconstruction_item = {},
			is_item_with_entity_data = {},
			is_item_with_inventory = {},
			is_item_with_label = {},
			is_item_with_tags = {},
			is_repair_tool = {},
			is_selection_tool = {},
			is_tool = {},
			is_upgrade_item = {},
			item_number = {},
			label = {
				"ItemWithLabel",
			},
			label_color = {
				"ItemWithLabel",
			},
			mapper_count = {
				"UpgradeItem",
			},
			owner_location = {},
			preview_icons = {},
			tags = {
				"ItemWithTags",
			},
			tile_filter_count = {
				"DeconstructionItem",
			},
			tile_filter_mode = {
				"DeconstructionItem",
			},
			tile_filters = {
				"DeconstructionItem",
			},
			tile_selection_mode = {
				"DeconstructionItem",
			},
			trees_and_rocks_only = {
				"DeconstructionItem",
			},
		},
	},
	LuaItemPrototype = {
		methods = {
			get_ammo_type = {
				"AmmoItem",
			},
			get_cursor_box_type = {
				"SelectionTool",
			},
			get_durability = {
				"ToolItem",
			},
			get_entity_filter_mode = {
				"SelectionTool",
			},
			get_entity_filters = {
				"SelectionTool",
			},
			get_entity_type_filters = {
				"SelectionTool",
			},
			get_inventory_size_bonus = {
				"ArmorPrototype",
			},
			get_selection_border_color = {
				"SelectionTool",
			},
			get_selection_mode_flags = {
				"SelectionTool",
			},
			get_spoil_ticks = {},
			get_tile_filter_mode = {
				"SelectionTool",
			},
			get_tile_filters = {
				"SelectionTool",
			},
			has_flag = {},
		},
		attributes = {
			always_include_tiles = {
				"SelectionTool",
			},
			ammo_category = {
				"AmmoItem",
			},
			attack_parameters = {
				"Gun",
			},
			beacon_tint = {
				"ModuleItem",
			},
			burnt_result = {},
			can_be_mod_opened = {},
			capsule_action = {
				"Capsule",
			},
			category = {
				"ModuleItem",
			},
			collision_box = {
				"ArmorPrototype",
			},
			default_import_location = {},
			default_label_color = {
				"ItemWithLabel",
			},
			destroyed_by_dropping_trigger = {},
			draw_label_for_cursor_render = {
				"ItemWithLabel",
			},
			drawing_box = {
				"ArmorPrototype",
			},
			durability_description_key = {
				"ToolItem",
			},
			durability_description_value = {
				"ToolItem",
			},
			entity_filter_slots = {
				"DeconstructionItem",
			},
			equipment_grid = {
				"Armor",
			},
			factoriopedia_durability_description_key = {
				"ToolItem",
			},
			filter_mode = {
				"ItemWithInventory",
			},
			flags = {},
			fuel_acceleration_multiplier = {},
			fuel_acceleration_multiplier_quality_bonus = {},
			fuel_category = {},
			fuel_emissions_multiplier = {},
			fuel_glow_color = {},
			fuel_top_speed_multiplier = {},
			fuel_top_speed_multiplier_quality_bonus = {},
			fuel_value = {},
			infinite = {
				"ToolItem",
			},
			ingredient_to_weight_coefficient = {},
			inventory_size = {
				"ItemWithInventoryPrototype",
			},
			item_filters = {
				"ItemWithInventory",
			},
			item_group_filters = {
				"ItemWithInventory",
			},
			item_subgroup_filters = {
				"ItemWithInventory",
			},
			localised_filter_message = {
				"ItemWithInventory",
			},
			magazine_size = {
				"AmmoItem",
			},
			manual_length_limit = {
				"RailPlanner",
			},
			module_effects = {
				"ModuleItem",
			},
			object_name = {},
			place_as_equipment_result = {},
			place_as_tile_result = {},
			place_result = {},
			plant_result = {},
			provides_flight = {
				"ArmorPrototype",
			},
			radius_color = {
				"Capsule",
			},
			rails = {
				"RailPlanner",
			},
			reload_time = {
				"AmmoItem",
			},
			requires_beacon_alt_mode = {
				"ModuleItem",
			},
			resistances = {
				"Armor",
			},
			rocket_launch_products = {},
			skip_fog_of_war = {
				"SelectionTool",
			},
			speed = {
				"RepairTool",
			},
			spoil_result = {},
			spoil_to_trigger_result = {},
			stack_size = {},
			stackable = {},
			support = {
				"RailPlanner",
			},
			tier = {
				"ModuleItem",
			},
			tile_filter_slots = {
				"DeconstructionItem",
			},
			valid = {},
			weight = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaItemStack = {
		methods = {
			add_ammo = {
				"AmmoItem",
			},
			add_durability = {
				"ToolItem",
			},
			can_set_stack = {},
			clear = {},
			create_grid = {
				"ItemWithEntityData",
			},
			drain_ammo = {
				"AmmoItem",
			},
			drain_durability = {
				"ToolItem",
			},
			export_stack = {},
			import_stack = {},
			set_stack = {},
			spoil = {},
			swap_stack = {},
			transfer_stack = {},
			use_capsule = {},
			build_blueprint = {
				"BlueprintItem",
			},
			cancel_deconstruct_area = {
				"DeconstructionItem",
			},
			clear_blueprint = {
				"BlueprintItem",
			},
			clear_deconstruction_item = {
				"DeconstructionItem",
			},
			clear_upgrade_item = {
				"UpgradeItem",
			},
			create_blueprint = {
				"BlueprintItem",
			},
			deconstruct_area = {
				"DeconstructionItem",
			},
			get_blueprint_entities = {
				"BlueprintItem",
			},
			get_blueprint_entity_count = {
				"BlueprintItem",
			},
			get_blueprint_entity_tag = {
				"BlueprintItem",
			},
			get_blueprint_entity_tags = {
				"BlueprintItem",
			},
			get_blueprint_tiles = {
				"BlueprintItem",
			},
			get_entity_filter = {
				"DeconstructionItem",
			},
			get_inventory = {},
			get_mapper = {
				"UpgradeItem",
			},
			get_tag = {
				"ItemWithTags",
			},
			get_tile_filter = {
				"DeconstructionItem",
			},
			is_blueprint_setup = {
				"BlueprintItem",
			},
			remove_tag = {
				"ItemWithTags",
			},
			set_blueprint_entities = {
				"BlueprintItem",
			},
			set_blueprint_entity_tag = {
				"BlueprintItem",
			},
			set_blueprint_entity_tags = {
				"BlueprintItem",
			},
			set_blueprint_tiles = {
				"BlueprintItem",
			},
			set_entity_filter = {
				"DeconstructionItem",
			},
			set_mapper = {
				"UpgradeItem",
			},
			set_tag = {
				"ItemWithTags",
			},
			set_tile_filter = {
				"DeconstructionItem",
			},
		},
		attributes = {
			count = {},
			health = {},
			is_module = {},
			item = {},
			name = {},
			object_name = {},
			prototype = {},
			quality = {},
			spoil_percent = {},
			spoil_tick = {},
			type = {},
			valid = {},
			valid_for_read = {},
			active_index = {
				"BlueprintBookItem",
			},
			allow_manual_label_change = {
				"ItemWithLabel",
			},
			ammo = {
				"AmmoItem",
			},
			blueprint_absolute_snapping = {
				"BlueprintItem",
			},
			blueprint_position_relative_to_grid = {
				"BlueprintItem",
			},
			blueprint_snap_to_grid = {
				"BlueprintItem",
			},
			cost_to_build = {
				"BlueprintItem",
			},
			custom_description = {
				"ItemWithTags",
			},
			default_icons = {
				"BlueprintItem",
			},
			durability = {
				"Tool",
			},
			entity_color = {
				"ItemWithEntityData",
			},
			entity_filter_count = {
				"DeconstructionItem",
			},
			entity_filter_mode = {
				"DeconstructionItem",
			},
			entity_filters = {
				"DeconstructionItem",
			},
			entity_label = {
				"ItemWithEntityData",
			},
			grid = {},
			is_ammo = {},
			is_armor = {},
			is_blueprint = {},
			is_blueprint_book = {},
			is_deconstruction_item = {},
			is_item_with_entity_data = {},
			is_item_with_inventory = {},
			is_item_with_label = {},
			is_item_with_tags = {},
			is_repair_tool = {},
			is_selection_tool = {},
			is_tool = {},
			is_upgrade_item = {},
			item_number = {},
			label = {
				"ItemWithLabel",
			},
			label_color = {
				"ItemWithLabel",
			},
			mapper_count = {
				"UpgradeItem",
			},
			owner_location = {},
			preview_icons = {},
			tags = {
				"ItemWithTags",
			},
			tile_filter_count = {
				"DeconstructionItem",
			},
			tile_filter_mode = {
				"DeconstructionItem",
			},
			tile_filters = {
				"DeconstructionItem",
			},
			tile_selection_mode = {
				"DeconstructionItem",
			},
			trees_and_rocks_only = {
				"DeconstructionItem",
			},
		},
	},
	LuaLampControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			blue_signal = {},
			color = {},
			color_mode = {},
			green_signal = {},
			object_name = {},
			red_signal = {},
			rgb_signal = {},
			use_colors = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaLazyLoadedValue = {
		methods = {
			get = {},
		},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaLoaderControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_read_transfers = {},
			circuit_set_filters = {},
			object_name = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaLogisticCell = {
		methods = {
			is_in_construction_range = {},
			is_in_logistic_range = {},
			is_neighbour_with = {},
		},
		attributes = {
			charge_approach_distance = {},
			charging_robot_count = {},
			charging_robots = {},
			construction_radius = {},
			logistic_network = {},
			logistic_radius = {},
			logistics_connection_distance = {},
			mobile = {},
			neighbours = {},
			object_name = {},
			owner = {},
			stationed_construction_robot_count = {},
			stationed_logistic_robot_count = {},
			to_charge_robot_count = {},
			to_charge_robots = {},
			transmitting = {},
			valid = {},
		},
	},
	LuaLogisticContainerControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_condition = {},
			circuit_condition_enabled = {},
			circuit_exclusive_mode_of_operation = {},
			object_name = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaLogisticNetwork = {
		methods = {
			can_satisfy_request = {},
			find_cell_closest_to = {},
			get_contents = {},
			get_item_count = {},
			get_supply_counts = {},
			get_supply_points = {},
			insert = {},
			remove_item = {},
			select_drop_point = {},
			select_pickup_point = {},
		},
		attributes = {
			active_provider_points = {},
			all_construction_robots = {},
			all_logistic_robots = {},
			available_construction_robots = {},
			available_logistic_robots = {},
			cells = {},
			construction_robots = {},
			empty_provider_points = {},
			empty_providers = {},
			force = {},
			logistic_members = {},
			logistic_robots = {},
			network_id = {},
			object_name = {},
			passive_provider_points = {},
			provider_points = {},
			providers = {},
			requester_points = {},
			requesters = {},
			robot_limit = {},
			robots = {},
			storage_points = {},
			storages = {},
			valid = {},
		},
	},
	LuaLogisticPoint = {
		methods = {
			add_section = {},
			get_section = {},
			remove_section = {},
		},
		attributes = {
			enabled = {},
			exact = {},
			filters = {},
			force = {},
			logistic_member_index = {},
			logistic_network = {},
			mode = {},
			object_name = {},
			owner = {},
			sections = {},
			sections_count = {},
			targeted_items_deliver = {},
			targeted_items_pickup = {},
			trash_not_requested = {},
			valid = {},
		},
	},
	LuaLogisticSection = {
		methods = {
			clear_slot = {},
			get_slot = {},
			set_slot = {},
		},
		attributes = {
			active = {},
			filters = {},
			filters_count = {},
			group = {},
			index = {},
			is_manual = {},
			multiplier = {},
			object_name = {},
			owner = {},
			type = {},
			valid = {},
		},
	},
	LuaLogisticSections = {
		methods = {
			add_section = {},
			get_section = {},
			remove_section = {},
		},
		attributes = {
			object_name = {},
			sections = {},
			sections_count = {},
			valid = {},
		},
	},
	LuaMiningDrillControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_read_resources = {},
			object_name = {},
			resource_read_mode = {},
			resource_read_targets = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaModSettingPrototype = {
		methods = {},
		attributes = {
			allow_blank = {},
			allowed_values = {},
			auto_trim = {},
			default_value = {},
			maximum_value = {},
			minimum_value = {},
			mod = {},
			object_name = {},
			setting_type = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaModuleCategoryPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaNamedNoiseExpression = {
		methods = {},
		attributes = {
			expression = {},
			intended_property = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaNamedNoiseFunction = {
		methods = {},
		attributes = {
			expression = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaParticlePrototype = {
		methods = {},
		attributes = {
			ended_in_water_trigger_effect = {},
			ended_on_ground_trigger_effect = {},
			fade_out_time = {},
			life_time = {},
			mining_particle_frame_speed = {},
			movement_modifier = {},
			movement_modifier_when_on_ground = {},
			object_name = {},
			regular_trigger_effect = {},
			regular_trigger_effect_frequency = {},
			render_layer = {},
			render_layer_when_on_ground = {},
			valid = {},
			vertical_acceleration = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaPermissionGroup = {
		methods = {
			add_player = {},
			allows_action = {},
			destroy = {},
			remove_player = {},
			set_allows_action = {},
		},
		attributes = {
			group_id = {},
			name = {},
			object_name = {},
			players = {},
			valid = {},
		},
	},
	LuaPermissionGroups = {
		methods = {
			create_group = {},
			get_group = {},
		},
		attributes = {
			groups = {},
			object_name = {},
			valid = {},
		},
	},
	LuaPlanet = {
		methods = {
			associate_surface = {},
			create_surface = {},
			reset_map_gen_settings = {},
		},
		attributes = {
			name = {},
			object_name = {},
			prototype = {},
			surface = {},
			valid = {},
		},
	},
	LuaPlayer = {
		methods = {
			activate_paste = {},
			add_alert = {},
			add_custom_alert = {},
			add_recipe_notification = {},
			add_to_clipboard = {},
			associate_character = {},
			build_from_cursor = {},
			can_build_from_cursor = {},
			can_place_entity = {},
			clear_console = {},
			clear_cursor = {},
			clear_inventory_highlights = {},
			clear_local_flying_texts = {},
			clear_recipe_notifications = {},
			clear_selection = {},
			connect_to_server = {},
			create_character = {},
			create_local_flying_text = {},
			disable_alert = {},
			disable_recipe_groups = {},
			disable_recipe_subgroups = {},
			disassociate_character = {},
			drag_wire = {},
			enable_alert = {},
			enable_recipe_groups = {},
			enable_recipe_subgroups = {},
			enter_space_platform = {},
			exit_cutscene = {},
			get_active_quick_bar_page = {},
			get_alerts = {},
			get_associated_characters = {},
			get_goal_description = {},
			get_infinity_inventory_filter = {},
			get_quick_bar_slot = {},
			is_alert_enabled = {},
			is_alert_muted = {},
			is_shortcut_available = {},
			is_shortcut_toggled = {},
			jump_to_cutscene_waypoint = {},
			land_on_planet = {},
			leave_space_platform = {},
			mute_alert = {},
			pipette_entity = {},
			play_sound = {},
			print = {},
			print_entity_statistics = {},
			print_lua_object_statistics = {},
			print_robot_jobs = {},
			remove_alert = {},
			request_translation = {},
			request_translations = {},
			set_active_quick_bar_page = {},
			set_controller = {},
			set_ending_screen_data = {},
			set_goal_description = {},
			set_infinity_inventory_filter = {},
			set_quick_bar_slot = {},
			set_shortcut_available = {},
			set_shortcut_toggled = {},
			start_selection = {},
			toggle_map_editor = {},
			unlock_achievement = {},
			unmute_alert = {},
			use_from_cursor = {},
			begin_crafting = {},
			can_insert = {},
			can_reach_entity = {},
			cancel_crafting = {},
			clear_gui_arrow = {},
			clear_items_inside = {},
			clear_selected_entity = {},
			disable_flashlight = {},
			enable_flashlight = {},
			get_craftable_count = {},
			get_inventory = {},
			get_item_count = {},
			get_main_inventory = {},
			get_max_inventory_index = {},
			get_requester_point = {},
			has_items_inside = {},
			insert = {},
			is_cursor_blueprint = {},
			is_cursor_empty = {},
			is_flashlight_enabled = {},
			is_player = {},
			mine_entity = {},
			mine_tile = {},
			open_technology_gui = {},
			remove_item = {},
			set_driving = {},
			set_gui_arrow = {},
			teleport = {},
			update_selected_entity = {},
		},
		attributes = {
			admin = {},
			afk_time = {},
			auto_sort_main_inventory = {},
			blueprint_to_setup = {},
			blueprints = {},
			centered_on = {},
			character = {},
			chat_color = {},
			color = {},
			connected = {},
			controller_type = {},
			cursor_stack_temporary = {},
			cutscene_character = {},
			display_density_scale = {},
			display_resolution = {},
			display_scale = {},
			drag_target = {},
			entity_copy_source = {},
			game_view_settings = {},
			gui = {},
			hand_location = {},
			index = {},
			infinity_inventory_filters = {},
			input_method = {},
			last_online = {},
			locale = {},
			minimap_enabled = {},
			mod_settings = {},
			name = {},
			object_name = {},
			online_time = {},
			opened_self = {},
			permission_group = {},
			physical_controller_type = {},
			physical_position = {},
			physical_surface = {},
			physical_surface_index = {},
			physical_vehicle = {},
			remove_unfiltered_items = {},
			render_mode = {},
			show_on_map = {},
			spectator = {},
			spidertron_remote_selection = {},
			stashed_controller_type = {},
			tag = {},
			ticks_to_respawn = {},
			undo_redo_stack = {},
			valid = {},
			build_distance = {},
			character_additional_mining_categories = {},
			character_build_distance_bonus = {},
			character_crafting_speed_modifier = {},
			character_health_bonus = {},
			character_inventory_slots_bonus = {},
			character_item_drop_distance_bonus = {},
			character_item_pickup_distance_bonus = {},
			character_loot_pickup_distance_bonus = {},
			character_maximum_following_robot_count_bonus = {},
			character_mining_progress = {},
			character_mining_speed_modifier = {},
			character_reach_distance_bonus = {},
			character_resource_reach_distance_bonus = {},
			character_running_speed = {},
			character_running_speed_modifier = {},
			character_trash_slot_count_bonus = {},
			cheat_mode = {},
			crafting_queue = {},
			crafting_queue_progress = {},
			crafting_queue_size = {},
			cursor_ghost = {},
			cursor_record = {},
			cursor_stack = {},
			driving = {},
			drop_item_distance = {},
			following_robots = {},
			force = {},
			force_index = {},
			in_combat = {},
			item_pickup_distance = {},
			loot_pickup_distance = {},
			mining_state = {},
			opened = {},
			opened_gui_type = {},
			picking_state = {},
			position = {},
			reach_distance = {},
			repair_state = {},
			resource_reach_distance = {},
			riding_state = {},
			selected = {},
			shooting_state = {},
			surface = {},
			surface_index = {},
			vehicle = {},
			walking_state = {},
		},
	},
	LuaProcessionLayerInheritanceGroupPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaProcessionPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaProfiler = {
		methods = {
			add = {},
			divide = {},
			reset = {},
			restart = {},
			stop = {},
		},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaProgrammableSpeakerControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_condition = {},
			circuit_parameters = {},
			object_name = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaPrototypeBase = {
		methods = {},
		attributes = {
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaPrototypes = {
		methods = {
			get_achievement_filtered = {},
			get_decorative_filtered = {},
			get_entity_filtered = {},
			get_equipment_filtered = {},
			get_fluid_filtered = {},
			get_history = {},
			get_item_filtered = {},
			get_mod_setting_filtered = {},
			get_recipe_filtered = {},
			get_technology_filtered = {},
			get_tile_filtered = {},
		},
		attributes = {
			achievement = {},
			active_trigger = {},
			airborne_pollutant = {},
			ammo_category = {},
			asteroid_chunk = {},
			autoplace_control = {},
			burner_usage = {},
			collision_layer = {},
			custom_event = {},
			custom_input = {},
			damage = {},
			decorative = {},
			entity = {},
			equipment = {},
			equipment_category = {},
			equipment_grid = {},
			fluid = {},
			font = {},
			fuel_category = {},
			item = {},
			item_group = {},
			item_subgroup = {},
			map_gen_preset = {},
			max_beacon_supply_area_distance = {},
			max_electric_pole_connection_distance = {},
			max_electric_pole_supply_area_distance = {},
			max_force_distraction_chunk_distance = {},
			max_force_distraction_distance = {},
			max_gate_activation_distance = {},
			max_inserter_reach_distance = {},
			max_pipe_to_ground_distance = {},
			max_underground_belt_distance = {},
			mod_setting = {},
			module_category = {},
			named_noise_expression = {},
			named_noise_function = {},
			object_name = {},
			particle = {},
			procession = {},
			procession_layer_inheritance_group = {},
			quality = {},
			recipe = {},
			recipe_category = {},
			resource_category = {},
			shortcut = {},
			space_connection = {},
			space_location = {},
			style = {},
			surface = {},
			surface_property = {},
			technology = {},
			tile = {},
			trivial_smoke = {},
			virtual_signal = {},
		},
	},
	LuaPumpControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			set_filter = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaQualityPrototype = {
		methods = {},
		attributes = {
			beacon_power_usage_multiplier = {},
			color = {},
			draw_sprite_by_default = {},
			level = {},
			mining_drill_resource_drain_multiplier = {},
			next = {},
			next_probability = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaRCON = {
		methods = {
			print = {},
		},
		attributes = {
			object_name = {},
		},
	},
	LuaRadarControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaRailEnd = {
		methods = {
			flip_direction = {},
			get_rail_extensions = {},
			make_copy = {},
			move_forward = {},
			move_natural = {},
			move_to_segment_end = {},
		},
		attributes = {
			alternative_in_signal_location = {},
			alternative_out_signal_location = {},
			direction = {},
			in_signal_location = {},
			location = {},
			object_name = {},
			out_signal_location = {},
			rail = {},
			valid = {},
		},
	},
	LuaRailPath = {
		methods = {},
		attributes = {
			current = {},
			is_front = {},
			object_name = {},
			rails = {},
			size = {},
			total_distance = {},
			travelled_distance = {},
			valid = {},
		},
	},
	LuaRailSignalBaseControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			blue_signal = {},
			circuit_condition = {},
			close_signal = {},
			green_signal = {},
			object_name = {},
			orange_signal = {},
			read_signal = {},
			red_signal = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaRandomGenerator = {
		methods = {
			re_seed = {},
		},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaReactorControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_fuel = {},
			read_temperature = {},
			temperature_signal = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaRecipe = {
		methods = {
			reload = {},
		},
		attributes = {
			category = {},
			enabled = {},
			energy = {},
			force = {},
			group = {},
			hidden = {},
			hidden_from_flow_stats = {},
			ingredients = {},
			localised_description = {},
			localised_name = {},
			name = {},
			object_name = {},
			order = {},
			productivity_bonus = {},
			products = {},
			prototype = {},
			subgroup = {},
			valid = {},
		},
	},
	LuaRecipeCategoryPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaRecipePrototype = {
		methods = {},
		attributes = {
			allow_as_intermediate = {},
			allow_decomposition = {},
			allow_inserter_overload = {},
			allow_intermediates = {},
			allowed_effects = {},
			allowed_module_categories = {},
			alternative_unlock_methods = {},
			always_show_made_in = {},
			always_show_products = {},
			category = {},
			crafting_machine_tints = {},
			effect_limitation_messages = {},
			emissions_multiplier = {},
			enabled = {},
			energy = {},
			hidden_from_flow_stats = {},
			hidden_from_player_crafting = {},
			hide_from_flow_stats = {},
			hide_from_player_crafting = {},
			hide_from_signal_gui = {},
			ingredients = {},
			is_parameter = {},
			main_product = {},
			maximum_productivity = {},
			object_name = {},
			overload_multiplier = {},
			preserve_products_in_machine_output = {},
			products = {},
			request_paste_multiplier = {},
			show_amount_in_title = {},
			surface_conditions = {},
			trash = {},
			unlock_results = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaRecord = {
		methods = {
			build_blueprint = {
				"BlueprintRecord",
			},
			cancel_deconstruct_area = {
				"DeconstructionRecord",
			},
			clear_blueprint = {
				"BlueprintRecord",
			},
			clear_deconstruction_data = {
				"DeconstructionRecord",
			},
			clear_upgrade_data = {
				"UpgradeRecord",
			},
			create_blueprint = {
				"BlueprintRecord",
			},
			deconstruct_area = {
				"DeconstructionRecord",
			},
			get_blueprint_entities = {
				"BlueprintRecord",
			},
			get_blueprint_entity_count = {
				"BlueprintRecord",
			},
			get_blueprint_entity_tag = {
				"BlueprintRecord",
			},
			get_blueprint_entity_tags = {
				"BlueprintRecord",
			},
			get_blueprint_tiles = {
				"BlueprintRecord",
			},
			get_entity_filter = {
				"DeconstructionRecord",
			},
			get_mapper = {
				"UpgradeRecord",
			},
			get_tile_filter = {
				"DeconstructionRecord",
			},
			is_blueprint_setup = {
				"BlueprintRecord",
			},
			set_blueprint_entities = {
				"BlueprintRecord",
			},
			set_blueprint_entity_tag = {
				"BlueprintRecord",
			},
			set_blueprint_entity_tags = {
				"BlueprintRecord",
			},
			set_blueprint_tiles = {
				"BlueprintRecord",
			},
			set_entity_filter = {
				"DeconstructionRecord",
			},
			set_mapper = {
				"UpgradeRecord",
			},
			set_tile_filter = {
				"DeconstructionRecord",
			},
		},
		attributes = {
			blueprint_absolute_snapping = {
				"BlueprintRecord",
			},
			blueprint_position_relative_to_grid = {
				"BlueprintRecord",
			},
			blueprint_snap_to_grid = {
				"BlueprintRecord",
			},
			contents = {
				"BlueprintBookRecord",
			},
			cost_to_build = {
				"BlueprintRecord",
			},
			default_icons = {
				"BlueprintRecord",
			},
			entity_filter_count = {
				"DeconstructionRecord",
			},
			entity_filter_mode = {
				"DeconstructionRecord",
			},
			entity_filters = {
				"DeconstructionRecord",
			},
			is_blueprint_preview = {
				"BlueprintRecord",
			},
			mapper_count = {
				"UpgradeRecord",
			},
			object_name = {},
			tile_filter_count = {
				"DeconstructionRecord",
			},
			tile_filter_mode = {
				"DeconstructionRecord",
			},
			tile_filters = {
				"DeconstructionRecord",
			},
			tile_selection_mode = {
				"DeconstructionRecord",
			},
			trees_and_rocks_only = {
				"DeconstructionRecord",
			},
			type = {},
			valid = {},
			valid_for_write = {},
		},
	},
	LuaRemote = {
		methods = {
			add_interface = {},
			call = {},
			remove_interface = {},
		},
		attributes = {
			interfaces = {},
			object_name = {},
		},
	},
	LuaRenderObject = {
		methods = {
			bring_to_front = {},
			destroy = {},
			move_to_back = {},
			set_corners = {
				"Rectangle",
			},
			set_dashes = {
				"Line",
			},
		},
		attributes = {
			alignment = {
				"Text",
			},
			angle = {
				"Arc",
			},
			animation = {
				"Animation",
			},
			animation_offset = {
				"Animation",
			},
			animation_speed = {
				"Animation",
			},
			color = {
				"Text",
				"Line",
				"Circle",
				"Rectangle",
				"Arc",
				"Polygon",
				"Sprite",
				"Light",
				"Animation",
			},
			dash_length = {
				"Line",
			},
			draw_on_ground = {
				"Text",
				"Line",
				"Circle",
				"Rectangle",
				"Arc",
				"Polygon",
			},
			filled = {
				"Circle",
				"Rectangle",
			},
			font = {
				"Text",
			},
			forces = {},
			from = {
				"Line",
			},
			gap_length = {
				"Line",
			},
			id = {},
			intensity = {
				"Light",
			},
			left_top = {
				"Rectangle",
			},
			max_radius = {
				"Arc",
			},
			min_radius = {
				"Arc",
			},
			minimum_darkness = {
				"Light",
			},
			object_name = {},
			only_in_alt_mode = {},
			orientation = {
				"Text",
				"Polygon",
				"Sprite",
				"Light",
				"Animation",
			},
			orientation_target = {
				"Polygon",
				"Sprite",
				"Animation",
			},
			oriented = {
				"Light",
			},
			oriented_offset = {
				"Sprite",
				"Animation",
			},
			players = {},
			radius = {
				"Circle",
			},
			render_layer = {
				"Sprite",
				"Animation",
			},
			right_bottom = {
				"Rectangle",
			},
			scale = {
				"Text",
				"Light",
			},
			scale_with_zoom = {
				"Text",
			},
			sprite = {
				"Sprite",
				"Light",
			},
			start_angle = {
				"Arc",
			},
			surface = {},
			target = {
				"Text",
				"Circle",
				"Arc",
				"Polygon",
				"Sprite",
				"Light",
				"Animation",
			},
			text = {
				"Text",
			},
			time_to_live = {},
			to = {
				"Line",
			},
			type = {},
			use_rich_text = {
				"Text",
			},
			use_target_orientation = {
				"Sprite",
				"Polygon",
				"Animation",
			},
			valid = {},
			vertical_alignment = {
				"Text",
			},
			vertices = {
				"Polygon",
			},
			visible = {},
			width = {
				"Line",
				"Circle",
				"Rectangle",
			},
			x_scale = {
				"Sprite",
				"Animation",
			},
			y_scale = {
				"Sprite",
				"Animation",
			},
		},
	},
	LuaRendering = {
		methods = {
			clear = {},
			draw_animation = {},
			draw_arc = {},
			draw_circle = {},
			draw_light = {},
			draw_line = {},
			draw_polygon = {},
			draw_rectangle = {},
			draw_sprite = {},
			draw_text = {},
			get_all_objects = {},
			get_object_by_id = {},
		},
		attributes = {
			object_name = {},
		},
	},
	LuaResourceCategoryPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaRoboportControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			available_construction_output_signal = {},
			available_logistic_output_signal = {},
			object_name = {},
			read_items_mode = {},
			read_logistics = {},
			read_robot_stats = {},
			roboport_count_output_signal = {},
			total_construction_output_signal = {},
			total_logistic_output_signal = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaRocketSiloControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_mode = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaSelectorCombinatorControlBehavior = {
		methods = {
			get_signal_last_tick = {},
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			parameters = {},
			valid = {},
			signals_last_tick = {},
			entity = {},
			type = {},
		},
	},
	LuaSettings = {
		methods = {
			get_player_settings = {},
		},
		attributes = {
			global = {},
			object_name = {},
			player_default = {},
			startup = {},
		},
	},
	LuaShortcutPrototype = {
		methods = {},
		attributes = {
			action = {},
			associated_control_input = {},
			item_to_spawn = {},
			object_name = {},
			technology_to_unlock = {},
			toggleable = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaSimulation = {
		methods = {
			activate_rail_planner = {},
			control_down = {},
			control_press = {},
			control_up = {},
			create_test_player = {},
			deactivate_rail_planner = {},
			get_slot_position = {},
			get_widget_position = {},
			mouse_click = {},
			mouse_down = {},
			mouse_up = {},
			move_cursor = {},
			scroll_clipboard_backwards = {},
			scroll_clipboard_forwards = {},
			write = {},
		},
		attributes = {
			camera_player_cursor_position = {},
			camera_position = {},
			camera_surface_index = {},
			object_name = {},
			valid = {},
		},
	},
	LuaSpaceConnectionPrototype = {
		methods = {},
		attributes = {
			asteroid_spawn_definitions = {},
			from = {},
			length = {},
			object_name = {},
			to = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaSpaceLocationPrototype = {
		methods = {},
		attributes = {
			asteroid_spawn_definitions = {},
			asteroid_spawn_influence = {},
			entities_require_heating = {
				"Planet",
			},
			map_gen_settings = {
				"Planet",
			},
			map_seed_offset = {
				"Planet",
			},
			object_name = {},
			player_effects = {
				"Planet",
			},
			pollutant_type = {
				"Planet",
			},
			position = {},
			solar_power_in_space = {},
			surface_properties = {
				"Planet",
			},
			ticks_between_player_effects = {
				"Planet",
			},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaSpacePlatform = {
		methods = {
			apply_starter_pack = {},
			cancel_deletion = {},
			create_asteroid_chunks = {},
			damage_tile = {},
			destroy = {},
			destroy_asteroid_chunks = {},
			find_asteroid_chunks_filtered = {},
			repair_tile = {},
		},
		attributes = {
			damaged_tiles = {},
			force = {},
			hub = {},
			index = {},
			name = {},
			object_name = {},
			schedule = {},
			scheduled_for_deletion = {},
			space_location = {},
			speed = {},
			starter_pack = {},
			state = {},
			surface = {},
			valid = {},
			weight = {},
		},
	},
	LuaSpacePlatformHubControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			damage_taken_signal = {},
			object_name = {},
			read_contents = {},
			read_damage_taken = {},
			read_moving_from = {},
			read_moving_to = {},
			read_speed = {},
			send_to_platform = {},
			speed_signal = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaStorageTankControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_contents = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaStyle = {
		methods = {},
		attributes = {
			badge_font = {
				"TabStyle",
			},
			badge_horizontal_spacing = {
				"TabStyle",
			},
			bar_width = {
				"LuaProgressBarStyle",
			},
			bottom_cell_padding = {
				"LuaTableStyle",
			},
			bottom_margin = {},
			bottom_padding = {},
			clicked_font_color = {
				"LuaButtonStyle",
			},
			clicked_vertical_offset = {
				"LuaButtonStyle",
			},
			color = {
				"LuaProgressBarStyle",
			},
			column_alignments = {},
			default_badge_font_color = {
				"TabStyle",
			},
			disabled_badge_font_color = {
				"TabStyle",
			},
			disabled_font_color = {
				"LuaButtonStyle",
				"LuaTabStyle",
			},
			draw_grayscale_picture = {
				"LuaButtonStyle",
			},
			extra_bottom_margin_when_activated = {
				"ScrollPaneStyle",
			},
			extra_bottom_padding_when_activated = {
				"ScrollPaneStyle",
			},
			extra_left_margin_when_activated = {
				"ScrollPaneStyle",
			},
			extra_left_padding_when_activated = {
				"ScrollPaneStyle",
			},
			extra_right_margin_when_activated = {
				"ScrollPaneStyle",
			},
			extra_right_padding_when_activated = {
				"ScrollPaneStyle",
			},
			extra_top_margin_when_activated = {
				"ScrollPaneStyle",
			},
			extra_top_padding_when_activated = {
				"ScrollPaneStyle",
			},
			font = {},
			font_color = {},
			gui = {},
			horizontal_align = {},
			horizontal_spacing = {
				"LuaTableStyle",
				"LuaFlowStyle",
				"LuaHorizontalFlowStyle",
			},
			horizontally_squashable = {},
			horizontally_stretchable = {},
			hovered_font_color = {
				"LuaButtonStyle",
			},
			left_cell_padding = {
				"LuaTableStyle",
			},
			left_margin = {},
			left_padding = {},
			maximal_height = {},
			maximal_width = {},
			minimal_height = {},
			minimal_width = {},
			name = {},
			natural_height = {},
			natural_width = {},
			object_name = {},
			pie_progress_color = {
				"LuaButtonStyle",
			},
			rich_text_setting = {
				"LuaLabelStyle",
				"LuaTextBoxStyle",
				"LuaTextFieldStyle",
			},
			right_cell_padding = {
				"LuaTableStyle",
			},
			right_margin = {},
			right_padding = {},
			selected_badge_font_color = {
				"TabStyle",
			},
			selected_clicked_font_color = {
				"LuaButtonStyle",
			},
			selected_font_color = {
				"LuaButtonStyle",
			},
			selected_hovered_font_color = {
				"LuaButtonStyle",
			},
			single_line = {
				"LabelStyle",
			},
			stretch_image_to_widget_size = {
				"ImageStyle",
			},
			strikethrough_color = {
				"LuaButtonStyle",
			},
			top_cell_padding = {
				"LuaTableStyle",
			},
			top_margin = {},
			top_padding = {},
			use_header_filler = {
				"LuaFrameStyle",
			},
			valid = {},
			vertical_align = {},
			vertical_spacing = {
				"LuaTableStyle",
				"LuaFlowStyle",
				"LuaVerticalFlowStyle",
				"LuaTabbedPaneStyle",
			},
			vertically_squashable = {},
			vertically_stretchable = {},
		},
	},
	LuaSurface = {
		methods = {
			add_script_area = {},
			add_script_position = {},
			build_checkerboard = {},
			build_enemy_base = {},
			calculate_tile_properties = {},
			can_fast_replace = {},
			can_place_entity = {},
			cancel_deconstruct_area = {},
			cancel_upgrade_area = {},
			clear = {},
			clear_hidden_tiles = {},
			clear_pollution = {},
			clone_area = {},
			clone_brush = {},
			clone_entities = {},
			count_entities_filtered = {},
			count_tiles_filtered = {},
			create_decoratives = {},
			create_entity = {},
			create_global_electric_network = {},
			create_particle = {},
			create_trivial_smoke = {},
			create_unit_group = {},
			deconstruct_area = {},
			decorative_prototype_collides = {},
			delete_chunk = {},
			destroy_decoratives = {},
			destroy_global_electric_network = {},
			edit_script_area = {},
			edit_script_position = {},
			entity_prototype_collides = {},
			execute_lightning = {},
			find_closest_logistic_network_by_position = {},
			find_decoratives_filtered = {},
			find_enemy_units = {},
			find_entities = {},
			find_entities_filtered = {},
			find_entity = {},
			find_logistic_network_by_position = {},
			find_logistic_networks_by_construction_area = {},
			find_nearest_enemy = {},
			find_nearest_enemy_entity_with_owner = {},
			find_non_colliding_position = {},
			find_non_colliding_position_in_box = {},
			find_tiles_filtered = {},
			find_units = {},
			force_generate_chunk_requests = {},
			get_chunks = {},
			get_closest = {},
			get_connected_tiles = {},
			get_double_hidden_tile = {},
			get_entities_with_force = {},
			get_hidden_tile = {},
			get_map_exchange_string = {},
			get_pollution = {},
			get_property = {},
			get_random_chunk = {},
			get_resource_counts = {},
			get_script_area = {},
			get_script_areas = {},
			get_script_position = {},
			get_script_positions = {},
			get_starting_area_radius = {},
			get_tile = {},
			get_total_pollution = {},
			is_chunk_generated = {},
			play_sound = {},
			pollute = {},
			print = {},
			regenerate_decorative = {},
			regenerate_entity = {},
			remove_script_area = {},
			remove_script_position = {},
			request_path = {},
			request_to_generate_chunks = {},
			set_chunk_generated_status = {},
			set_double_hidden_tile = {},
			set_hidden_tile = {},
			set_multi_command = {},
			set_property = {},
			set_tiles = {},
			spill_item_stack = {},
			upgrade_area = {},
		},
		attributes = {
			always_day = {},
			brightness_visual_weights = {},
			darkness = {},
			dawn = {},
			daytime = {},
			deletable = {},
			dusk = {},
			evening = {},
			freeze_daytime = {},
			generate_with_lab_tiles = {},
			global_effect = {},
			has_global_electric_network = {},
			index = {},
			localised_name = {},
			map_gen_settings = {},
			min_brightness = {},
			morning = {},
			name = {},
			no_enemies_mode = {},
			object_name = {},
			peaceful_mode = {},
			planet = {},
			platform = {},
			pollutant_type = {},
			show_clouds = {},
			solar_power_multiplier = {},
			ticks_per_day = {},
			valid = {},
			wind_orientation = {},
			wind_orientation_change = {},
			wind_speed = {},
		},
	},
	LuaSurfacePropertyPrototype = {
		methods = {},
		attributes = {
			default_value = {},
			is_time = {},
			localised_unit_key = {},
			object_name = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaSurfacePrototype = {
		methods = {},
		attributes = {
			object_name = {},
			surface_properties = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaTechnology = {
		methods = {
			reload = {},
			research_recursive = {},
		},
		attributes = {
			enabled = {},
			force = {},
			level = {},
			localised_description = {},
			localised_name = {},
			name = {},
			object_name = {},
			order = {},
			prerequisites = {},
			prototype = {},
			research_unit_count = {},
			research_unit_count_formula = {},
			research_unit_energy = {},
			research_unit_ingredients = {},
			researched = {},
			saved_progress = {},
			successors = {},
			upgrade = {},
			valid = {},
			visible_when_disabled = {},
		},
	},
	LuaTechnologyPrototype = {
		methods = {},
		attributes = {
			allows_productivity = {},
			effects = {},
			enabled = {},
			essential = {},
			ignore_tech_cost_multiplier = {},
			level = {},
			max_level = {},
			object_name = {},
			prerequisites = {},
			research_trigger = {},
			research_unit_count = {},
			research_unit_count_formula = {},
			research_unit_energy = {},
			research_unit_ingredients = {},
			successors = {},
			upgrade = {},
			valid = {},
			visible_when_disabled = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaTile = {
		methods = {
			cancel_deconstruction = {},
			collides_with = {},
			get_tile_ghosts = {},
			has_tile_ghost = {},
			order_deconstruction = {},
			to_be_deconstructed = {},
		},
		attributes = {
			double_hidden_tile = {},
			hidden_tile = {},
			name = {},
			object_name = {},
			position = {},
			prototype = {},
			surface = {},
			valid = {},
		},
	},
	LuaTilePrototype = {
		methods = {},
		attributes = {
			absorptions_per_second = {},
			allowed_neighbors = {},
			allows_being_covered = {},
			ambient_sounds_group = {},
			automatic_neighbors = {},
			autoplace_specification = {},
			bound_decoratives = {},
			can_be_part_of_blueprint = {},
			check_collision_with_entities = {},
			collision_mask = {},
			decorative_removal_probability = {},
			default_cover_tile = {},
			default_destroyed_dropped_item_trigger = {},
			destroys_dropped_items = {},
			fluid = {},
			frozen_variant = {},
			is_foundation = {},
			items_to_place_this = {},
			layer = {},
			map_color = {},
			max_health = {},
			mineable_properties = {},
			needs_correction = {},
			next_direction = {},
			object_name = {},
			placeable_by = {},
			scorch_mark_color = {},
			thawed_variant = {},
			trigger_effect = {},
			valid = {},
			vehicle_friction_modifier = {},
			walking_speed_modifier = {},
			weight = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaTrain = {
		methods = {
			clear_fluids_inside = {},
			clear_items_inside = {},
			get_contents = {},
			get_fluid_contents = {},
			get_fluid_count = {},
			get_item_count = {},
			get_rail_end = {},
			get_rails = {},
			go_to_station = {},
			insert = {},
			insert_fluid = {},
			recalculate_path = {},
			remove_fluid = {},
			remove_item = {},
		},
		attributes = {
			back_end = {},
			back_stock = {},
			cargo_wagons = {},
			carriages = {},
			fluid_wagons = {},
			front_end = {},
			front_stock = {},
			group = {},
			has_path = {},
			id = {},
			kill_count = {},
			killed_players = {},
			locomotives = {},
			manual_mode = {},
			max_backward_speed = {},
			max_forward_speed = {},
			object_name = {},
			passengers = {},
			path = {},
			path_end_rail = {},
			path_end_stop = {},
			riding_state = {},
			schedule = {},
			signal = {},
			speed = {},
			state = {},
			station = {},
			valid = {},
			weight = {},
		},
	},
	LuaTrainManager = {
		methods = {
			get_train_by_id = {},
			get_train_stops = {},
			get_trains = {},
			request_train_path = {},
		},
		attributes = {
			object_name = {},
			valid = {},
		},
	},
	LuaTrainStopControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			priority_signal = {},
			read_from_train = {},
			read_stopped_train = {},
			read_trains_count = {},
			send_to_train = {},
			set_priority = {},
			set_trains_limit = {},
			stopped_train_signal = {},
			trains_count_signal = {},
			trains_limit_signal = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaTransportBeltControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			object_name = {},
			read_contents = {},
			read_contents_mode = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaTransportLine = {
		methods = {
			can_insert_at = {},
			can_insert_at_back = {},
			clear = {},
			get_contents = {},
			get_detailed_contents = {},
			get_item_count = {},
			get_line_item_position = {},
			insert_at = {},
			insert_at_back = {},
			line_equals = {},
			remove_item = {},
		},
		attributes = {
			input_lines = {},
			line_length = {},
			object_name = {},
			output_lines = {},
			owner = {},
			valid = {},
		},
	},
	LuaTrivialSmokePrototype = {
		methods = {},
		attributes = {
			affected_by_wind = {},
			color = {},
			cyclic = {},
			duration = {},
			end_scale = {},
			fade_away_duration = {},
			fade_in_duration = {},
			glow_animation = {},
			glow_fade_away_duration = {},
			movement_slow_down_factor = {},
			object_name = {},
			render_layer = {},
			show_when_smoke_off = {},
			spread_duration = {},
			start_scale = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaTurretControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			ignore_unlisted_targets_condition = {},
			object_name = {},
			read_ammo = {},
			set_ignore_unlisted_targets = {},
			set_priority_list = {},
			valid = {},
			circuit_condition = {},
			circuit_enable_disable = {},
			connect_to_logistic_network = {},
			disabled = {},
			logistic_condition = {},
			entity = {},
			type = {},
		},
	},
	LuaUndoRedoStack = {
		methods = {
			get_redo_item = {},
			get_redo_item_count = {},
			get_redo_tag = {},
			get_redo_tags = {},
			get_undo_item = {},
			get_undo_item_count = {},
			get_undo_tag = {},
			get_undo_tags = {},
			remove_redo_action = {},
			remove_redo_item = {},
			remove_redo_tag = {},
			remove_undo_action = {},
			remove_undo_item = {},
			remove_undo_tag = {},
			set_redo_tag = {},
			set_undo_tag = {},
		},
		attributes = {
			object_name = {},
			player_index = {},
			valid = {},
		},
	},
	LuaVirtualSignalPrototype = {
		methods = {},
		attributes = {
			object_name = {},
			special = {},
			valid = {},
			group = {},
			hidden = {},
			hidden_in_factoriopedia = {},
			localised_description = {},
			localised_name = {},
			name = {},
			order = {},
			parameter = {},
			subgroup = {},
			type = {},
		},
	},
	LuaVoidEnergySourcePrototype = {
		methods = {},
		attributes = {
			emissions_per_joule = {},
			object_name = {},
			render_no_network_icon = {},
			render_no_power_icon = {},
			valid = {},
		},
	},
	LuaWallControlBehavior = {
		methods = {
			get_circuit_network = {},
		},
		attributes = {
			circuit_condition = {},
			object_name = {},
			open_gate = {},
			output_signal = {},
			read_sensor = {},
			valid = {},
			entity = {},
			type = {},
		},
	},
	LuaWireConnector = {
		methods = {
			can_wire_reach = {},
			connect_to = {},
			disconnect_all = {},
			disconnect_from = {},
			have_common_neighbour = {},
			is_connected_to = {},
		},
		attributes = {
			connection_count = {},
			connections = {},
			is_ghost = {},
			network_id = {},
			object_name = {},
			owner = {},
			real_connection_count = {},
			real_connections = {},
			valid = {},
			wire_connector_id = {},
			wire_type = {},
		},
	},
}